// --------------------------------------------
// Module: rt61pci
// Abstract: rt61pci PRIVATE types and constants
// Supported chipsets: RT2561
// --------------------------------------------
//  1) INCLUDES and DEPENDENCIES
//  2) GENERAL MACROS
//  3) RT61 REGISTERS
//  4) TX DESCRIPTOR
//  5) RX DESCRIPTOR
//  6) CRC functions
//  7) Chipset identification
//  8) RINGS
//  9) 802.11
//  10) RATE
//  11) TX POWER
//  12) rt2x00dev structure
//  13) Other constants
//  14) FIRMWARE IMAGE
// --------------------------------------------
#ifndef _MARTE_RT61_H_
#define _MARTE_RT61_H_
// --------------------------------------------
//  1) INCLUDES and DEPENDENCIES
// --------------------------------------------
#include <sys/pci.h> // For pci functions (pci_find_device...)
#include <sys/io.h> // For readb, writeb
#include <intr.h> // For interrupt handler
#include <semaphore.h> // For synchronize threads and interrupt handler
#include "rt61-linux-layer.h" // For linux fake functions and constants
#include "rt61-interface.h" // rt61 PUBLIC types and functions
// --------------------------------------------
//  2) GENERAL MACROS
// --------------------------------------------
//     2a) Printing macros
//------------------------------------------------------------------
#define DRV_NAME "rt61pci"
#if CONFIG_RT2X00_DEBUG == 1 // defined at rt61-interface.h
#define DEBUG_PRINTK(__message...) \
	do { printk(__message); } while (0)
#else /* CONFIG_RT2X00_DEBUG */
#define DEBUG_PRINTK(__message...) \
	do { } while (0)
#endif /* CONFIG_RT2X00_DEBUG */

#define PANIC(__message, __args...) \
	printk(KERN_PANIC DRV_NAME "->%s: Panic - " __message, \
		__FUNCTION__, ##__args);
#define ERROR(__message, __args...) \
	printk(KERN_ERR DRV_NAME "->%s: Error - " __message, \
		__FUNCTION__, ##__args);
#define WARNING(__message, __args...) \
	DEBUG_PRINTK(KERN_WARNING DRV_NAME "->%s: Warning - " __message, \
		__FUNCTION__, ##__args);
#define NOTICE(__message, __args...) \
	DEBUG_PRINTK(KERN_NOTICE DRV_NAME "->%s: Notice - " __message, \
		__FUNCTION__, ##__args);
#define INFO(__message, __args...) \
	DEBUG_PRINTK(KERN_INFO DRV_NAME "->%s: Info - " __message, \
		__FUNCTION__, ##__args);
#define DEBUG(__message, __args...) \
	DEBUG_PRINTK(KERN_DEBUG DRV_NAME "->%s: Debug - " __message, \
		__FUNCTION__, ##__args);
//------------------------------------------------------------------
//     2b) BIT Level macros
//------------------------------------------------------------------
// Macros for determining which is the lowest or highest bit
// set in a 16 or 32 bit variable.
//------------------------------------------------------------------
#define BIT_SET(__val, __bit)	(__val & (1 << __bit))

#define BIT_OK(__val, __bit, __low, __high) \
	(__bit < __low ? 1 : \
	(__bit > __high ? 1 : \
	BIT_SET(__val, __bit) ? 1 : 0))

#define LOWEST_BIT16(__val) \
	(BIT_SET(__val, 0) ? 0 : (BIT_SET(__val, 1) ? 1 : \
	(BIT_SET(__val, 2) ? 2 : (BIT_SET(__val, 3) ? 3 : \
	(BIT_SET(__val, 4) ? 4 : (BIT_SET(__val, 5) ? 5 : \
	(BIT_SET(__val, 6) ? 6 : (BIT_SET(__val, 7) ? 7 : \
	(BIT_SET(__val, 8) ? 8 : (BIT_SET(__val, 9) ? 9 : \
	(BIT_SET(__val, 10) ? 10 : (BIT_SET(__val, 11) ? 11 : \
	(BIT_SET(__val, 12) ? 12 : (BIT_SET(__val, 13) ? 13 : \
	(BIT_SET(__val, 14) ? 14 : (BIT_SET(__val, 15) ? 15 : \
	-EINVAL))))))))))))))))

#define LOWEST_BIT32(__val) \
	(BIT_SET(__val, 0) ? 0 : (BIT_SET(__val, 1) ? 1 : \
	(BIT_SET(__val, 2) ? 2 : (BIT_SET(__val, 3) ? 3 : \
	(BIT_SET(__val, 4) ? 4 : (BIT_SET(__val, 5) ? 5 : \
	(BIT_SET(__val, 6) ? 6 : (BIT_SET(__val, 7) ? 7 : \
	(BIT_SET(__val, 8) ? 8 : (BIT_SET(__val, 9) ? 9 : \
	(BIT_SET(__val, 10) ? 10 : (BIT_SET(__val, 11) ? 11 : \
	(BIT_SET(__val, 12) ? 12 : (BIT_SET(__val, 13) ? 13 : \
	(BIT_SET(__val, 14) ? 14 : (BIT_SET(__val, 15) ? 15 : \
	(BIT_SET(__val, 16) ? 16 : (BIT_SET(__val, 17) ? 17 : \
	(BIT_SET(__val, 18) ? 18 : (BIT_SET(__val, 19) ? 19 : \
	(BIT_SET(__val, 20) ? 20 : (BIT_SET(__val, 21) ? 21 : \
	(BIT_SET(__val, 22) ? 22 : (BIT_SET(__val, 23) ? 23 : \
	(BIT_SET(__val, 24) ? 24 : (BIT_SET(__val, 25) ? 25 : \
	(BIT_SET(__val, 26) ? 27 : (BIT_SET(__val, 27) ? 27 : \
	(BIT_SET(__val, 28) ? 28 : (BIT_SET(__val, 29) ? 29 : \
	(BIT_SET(__val, 30) ? 30 : (BIT_SET(__val, 31) ? 31 : \
	-EINVAL))))))))))))))))))))))))))))))))

#define HIGHEST_BIT16(__val) \
	(BIT_SET(__val, 15) ? 15 : (BIT_SET(__val, 14) ? 14 : \
	(BIT_SET(__val, 13) ? 13 : (BIT_SET(__val, 12) ? 12 : \
	(BIT_SET(__val, 11) ? 11 : (BIT_SET(__val, 10) ? 10 : \
	(BIT_SET(__val, 9) ? 9 : (BIT_SET(__val, 8) ? 8 : \
	(BIT_SET(__val, 7) ? 7 : (BIT_SET(__val, 6) ? 6 : \
	(BIT_SET(__val, 5) ? 5 : (BIT_SET(__val, 4) ? 4 : \
	(BIT_SET(__val, 3) ? 3 : (BIT_SET(__val, 2) ? 2 : \
	(BIT_SET(__val, 1) ? 1 : (BIT_SET(__val, 0) ? 0 : \
	-EINVAL))))))))))))))))

#define HIGHEST_BIT32(__val) \
	(BIT_SET(__val, 31) ? 31 : (BIT_SET(__val, 30) ? 30 : \
	(BIT_SET(__val, 29) ? 29 : (BIT_SET(__val, 28) ? 28 : \
	(BIT_SET(__val, 27) ? 27 : (BIT_SET(__val, 26) ? 26 : \
	(BIT_SET(__val, 25) ? 25 : (BIT_SET(__val, 24) ? 24 : \
	(BIT_SET(__val, 23) ? 23 : (BIT_SET(__val, 22) ? 22 : \
	(BIT_SET(__val, 21) ? 21 : (BIT_SET(__val, 20) ? 20 : \
	(BIT_SET(__val, 19) ? 19 : (BIT_SET(__val, 18) ? 18 : \
	(BIT_SET(__val, 17) ? 17 : (BIT_SET(__val, 16) ? 16 : \
	(BIT_SET(__val, 15) ? 15 : (BIT_SET(__val, 14) ? 14 : \
	(BIT_SET(__val, 13) ? 13 : (BIT_SET(__val, 12) ? 12 : \
	(BIT_SET(__val, 11) ? 11 : (BIT_SET(__val, 10) ? 10 : \
	(BIT_SET(__val, 9) ? 9 : (BIT_SET(__val, 8) ? 8 : \
	(BIT_SET(__val, 7) ? 7 : (BIT_SET(__val, 6) ? 6 : \
	(BIT_SET(__val, 5) ? 5 : (BIT_SET(__val, 4) ? 4 : \
	(BIT_SET(__val, 3) ? 3 : (BIT_SET(__val, 2) ? 2 : \
	(BIT_SET(__val, 1) ? 1 : (BIT_SET(__val, 0) ? 0 : \
	-EINVAL))))))))))))))))))))))))))))))))

#define BITRANGE_OK16(__val, __low, __high) \
	((BIT_OK(__val, 0, __low, __high) && \
	  BIT_OK(__val, 1, __low, __high) && \
	  BIT_OK(__val, 2, __low, __high) && \
	  BIT_OK(__val, 3, __low, __high) && \
	  BIT_OK(__val, 4, __low, __high) && \
	  BIT_OK(__val, 5, __low, __high) && \
	  BIT_OK(__val, 6, __low, __high) && \
	  BIT_OK(__val, 7, __low, __high) && \
	  BIT_OK(__val, 8, __low, __high) && \
	  BIT_OK(__val, 9, __low, __high) && \
	  BIT_OK(__val, 10, __low, __high) && \
	  BIT_OK(__val, 11, __low, __high) && \
	  BIT_OK(__val, 12, __low, __high) && \
	  BIT_OK(__val, 13, __low, __high) && \
	  BIT_OK(__val, 14, __low, __high) && \
	  BIT_OK(__val, 15, __low, __high)) ? \
	0 : -EINVAL)

#define BITRANGE_OK32(__val, __low, __high) \
	((BIT_OK(__val, 0, __low, __high) && \
	  BIT_OK(__val, 1, __low, __high) && \
	  BIT_OK(__val, 2, __low, __high) && \
	  BIT_OK(__val, 3, __low, __high) && \
	  BIT_OK(__val, 4, __low, __high) && \
	  BIT_OK(__val, 5, __low, __high) && \
	  BIT_OK(__val, 6, __low, __high) && \
	  BIT_OK(__val, 7, __low, __high) && \
	  BIT_OK(__val, 8, __low, __high) && \
	  BIT_OK(__val, 9, __low, __high) && \
	  BIT_OK(__val, 10, __low, __high) && \
	  BIT_OK(__val, 11, __low, __high) && \
	  BIT_OK(__val, 12, __low, __high) && \
	  BIT_OK(__val, 13, __low, __high) && \
	  BIT_OK(__val, 14, __low, __high) && \
	  BIT_OK(__val, 15, __low, __high) && \
	  BIT_OK(__val, 16, __low, __high) && \
	  BIT_OK(__val, 17, __low, __high) && \
	  BIT_OK(__val, 18, __low, __high) && \
	  BIT_OK(__val, 19, __low, __high) && \
	  BIT_OK(__val, 20, __low, __high) && \
	  BIT_OK(__val, 21, __low, __high) && \
	  BIT_OK(__val, 22, __low, __high) && \
	  BIT_OK(__val, 23, __low, __high) && \
	  BIT_OK(__val, 24, __low, __high) && \
	  BIT_OK(__val, 25, __low, __high) && \
	  BIT_OK(__val, 26, __low, __high) && \
	  BIT_OK(__val, 27, __low, __high) && \
	  BIT_OK(__val, 28, __low, __high) && \
	  BIT_OK(__val, 29, __low, __high) && \
	  BIT_OK(__val, 30, __low, __high) && \
	  BIT_OK(__val, 31, __low, __high)) ? \
	0 : -EINVAL)

extern int error_lowest_bit_not_constant;
extern int error_highest_bit_not_constant;
extern int error_bitrange_not_constant;
extern int error_bitrange_bad;

#define BUILD_LOWEST_BIT16(__val) \
 	(!__builtin_constant_p(__val) ? error_lowest_bit_not_constant : \
	LOWEST_BIT16(__val))

#define BUILD_LOWEST_BIT32(__val) \
 	(!__builtin_constant_p(__val) ? error_lowest_bit_not_constant : \
	LOWEST_BIT32(__val))

#define BUILD_HIGHEST_BIT16(__val) \
 	(!__builtin_constant_p(__val) ? error_highest_bit_not_constant : \
	HIGHEST_BIT16(__val))

#define BUILD_HIGHEST_BIT32(__val) \
 	(!__builtin_constant_p(__val) ? error_highest_bit_not_constant : \
	HIGHEST_BIT32(__val))

#define BUILD_BITRANGE_OK16(__val, __low, __high) \
	((!__builtin_constant_p(__val) || !__builtin_constant_p(__low) || \
	  !__builtin_constant_p(__high)) ? error_bitrange_not_constant : \
	BITRANGE_OK16(__val, __low, __high))

#define BUILD_BITRANGE_OK32(__val, __low, __high) \
	((!__builtin_constant_p(__val) || !__builtin_constant_p(__low) || \
	  !__builtin_constant_p(__high)) ? error_bitrange_not_constant : \
	BITRANGE_OK16(__val, __low, __high))
//------------------------------------------------------------------
//     2c) Register handlers
//------------------------------------------------------------------
// We store the position of a register field inside a field structure,
// This will simplify the process of setting and reading a certain field
// inside the register while making sure the process remains byte order safe.
// Before setting the value into the structure we use macros to determine
// whether all bits in the field are contineous and valid.
// These additional checks will be optimized away at compile time,
// but do have a major impact on compile speed, therefor we only make this
// check when compiling with debug enabled.
//------------------------------------------------------------------
struct rt2x00_field16 {
   u16 bit_offset;
   u16 bit_mask;
};
//------------------------------------------------------------------
struct rt2x00_field32 {
   u32 bit_offset;
   u32 bit_mask;
};
//------------------------------------------------------------------
// Before intitializing the rt2x00_field# structures,
// we will check if the bitmask is correct and does
// not contain any gaps.
// This check is only done in debug mode, since it severely
// impacts compilation speed.
//------------------------------------------------------------------
#ifdef CONFIG_RT2X00_DEBUG
#define FIELD16(__mask) \
	( (struct rt2x00_field16) { \
		(BUILD_BITRANGE_OK16(__mask, BUILD_LOWEST_BIT16(__mask), \
			BUILD_HIGHEST_BIT16(__mask)) == 0) ? \
		BUILD_LOWEST_BIT16(__mask) : error_bitrange_bad, \
		(__mask) \
} )

#define FIELD32(__mask) \
	( (struct rt2x00_field32) { \
		(BUILD_BITRANGE_OK32(__mask, BUILD_LOWEST_BIT32(__mask), \
			BUILD_HIGHEST_BIT32(__mask)) == 0) ? \
		BUILD_LOWEST_BIT32(__mask) : error_bitrange_bad, \
		(__mask) \
} )
#else /* CONFIG_RT2X00_DEBUG */
#define FIELD16(__mask) \
	( (struct rt2x00_field16) { \
		BUILD_LOWEST_BIT16(__mask), (__mask) \
} )

#define FIELD32(__mask) \
	( (struct rt2x00_field32) { \
		BUILD_LOWEST_BIT32(__mask), (__mask) \
} )
#endif /* CONFIG_RT2X00_DEBUG */
//------------------------------------------------------------------
static inline void rt2x00_set_field32(u32 *reg,
                                      const struct rt2x00_field32 field, const u32 value)
{
   *reg &= ~(field.bit_mask);
   *reg |= (value << field.bit_offset) & field.bit_mask;
}
//------------------------------------------------------------------
static inline u32 rt2x00_get_field32(const u32 reg,
                                     const struct rt2x00_field32 field)
{
   return (reg & field.bit_mask) >> field.bit_offset;
}
//------------------------------------------------------------------
static inline void rt2x00_set_field16(u16 *reg,
                                      const struct rt2x00_field16 field, const u16 value)
{
   *reg &= ~(field.bit_mask);
   *reg |= (value << field.bit_offset) & field.bit_mask;
}
//------------------------------------------------------------------
static inline u16 rt2x00_get_field16(const u16 reg,
                                     const struct rt2x00_field16 field)
{
   return (reg & field.bit_mask) >> field.bit_offset;
}
// --------------------------------------------
//  3) RT61 REGISTERS
// --------------------------------------------
//     3a) MAC Control/Status Registers(CSR).
//         Some values are set in TU, whereas 1 TU == 1024 us.
//------------------------------------------------------------------
// MAC_CSR0: ASIC revision number.
#define MAC_CSR0			0x3000
// MAC_CSR1: System control register.
// SOFT_RESET: Software reset bit, 1: reset, 0: normal.
// BBP_RESET: Hardware reset BBP.
// HOST_READY: Host is ready after initialization, 1: ready.
#define MAC_CSR1			0x3004
#define MAC_CSR1_SOFT_RESET		FIELD32(0x00000001)
#define MAC_CSR1_BBP_RESET		FIELD32(0x00000002)
#define MAC_CSR1_HOST_READY		FIELD32(0x00000004)
// MAC_CSR2: STA MAC register 0.
#define MAC_CSR2			0x3008
#define MAC_CSR2_BYTE0			FIELD32(0x000000ff)
#define MAC_CSR2_BYTE1			FIELD32(0x0000ff00)
#define MAC_CSR2_BYTE2			FIELD32(0x00ff0000)
#define MAC_CSR2_BYTE3			FIELD32(0xff000000)
// MAC_CSR3: STA MAC register 1.
#define MAC_CSR3			0x300c
#define MAC_CSR3_BYTE4			FIELD32(0x000000ff)
#define MAC_CSR3_BYTE5			FIELD32(0x0000ff00)
#define MAC_CSR3_UNICAST_TO_ME_MASK	FIELD32(0x00ff0000)
// MAC_CSR4: BSSID register 0.
#define MAC_CSR4			0x3010
#define MAC_CSR4_BYTE0			FIELD32(0x000000ff)
#define MAC_CSR4_BYTE1			FIELD32(0x0000ff00)
#define MAC_CSR4_BYTE2			FIELD32(0x00ff0000)
#define MAC_CSR4_BYTE3			FIELD32(0xff000000)
// MAC_CSR5: BSSID register 1.
// BSS_ID_MASK: 3: one BSSID, 0: 4 BSSID, 2 or 1: 2 BSSID.
#define MAC_CSR5			0x3014
#define MAC_CSR5_BYTE4			FIELD32(0x000000ff)
#define MAC_CSR5_BYTE5			FIELD32(0x0000ff00)
#define MAC_CSR5_BSS_ID_MASK		FIELD32(0x00ff0000)
// MAC_CSR6: Maximum frame length register.
#define MAC_CSR6			0x3018
#define MAC_CSR6_MAX_FRAME_UNIT		FIELD32(0x000007ff)
// MAC_CSR7: Reserved
#define MAC_CSR7			0x301c
// MAC_CSR8: SIFS/EIFS register.
// All units are in US.
#define MAC_CSR8			0x3020
#define MAC_CSR8_SIFS			FIELD32(0x000000ff)
#define MAC_CSR8_SIFS_AFTER_RX_OFDM	FIELD32(0x0000ff00)
#define MAC_CSR8_EIFS			FIELD32(0xffff0000)
// MAC_CSR9: Back-Off control register.
// SLOT_TIME: Slot time, default is 20us for 802.11BG.
// CWMIN: Bit for Cwmin. default Cwmin is 31 (2^5 - 1).
// CWMAX: Bit for Cwmax, default Cwmax is 1023 (2^10 - 1).
// CW_SELECT: 1: CWmin/Cwmax select from register, 0:select from TxD.
#define MAC_CSR9			0x3024
#define MAC_CSR9_SLOT_TIME		FIELD32(0x000000ff)
#define MAC_CSR9_CWMIN			FIELD32(0x00000f00)
#define MAC_CSR9_CWMAX			FIELD32(0x0000f000)
#define MAC_CSR9_CW_SELECT		FIELD32(0x00010000)
// MAC_CSR10: Power state configuration.
#define MAC_CSR10			0x3028
// MAC_CSR11: Power saving transition time register.
// DELAY_AFTER_TBCN: Delay after Tbcn expired in units of TU.
// TBCN_BEFORE_WAKEUP: Number of beacon before wakeup.
// WAKEUP_LATENCY: In unit of TU.
#define MAC_CSR11			0x302c
#define MAC_CSR11_DELAY_AFTER_TBCN	FIELD32(0x000000ff)
#define MAC_CSR11_TBCN_BEFORE_WAKEUP	FIELD32(0x00007f00)
#define MAC_CSR11_AUTOWAKE		FIELD32(0x00008000)
#define MAC_CSR11_WAKEUP_LATENCY	FIELD32(0x000f0000)
// MAC_CSR12: Manual power control / status register (merge CSR20 & PWRCSR1).
// CURRENT_STATE: 0:sleep, 1:awake.
// FORCE_WAKEUP: This has higher priority than PUT_TO_SLEEP.
// BBP_CURRENT_STATE: 0: BBP sleep, 1: BBP awake.
#define MAC_CSR12			0x3030
#define MAC_CSR12_CURRENT_STATE		FIELD32(0x00000001)
#define MAC_CSR12_PUT_TO_SLEEP		FIELD32(0x00000002)
#define MAC_CSR12_FORCE_WAKEUP		FIELD32(0x00000004)
#define MAC_CSR12_BBP_CURRENT_STATE	FIELD32(0x00000008)
// MAC_CSR13: GPIO.
#define MAC_CSR13			0x3034
#define MAC_CSR13_BIT0			FIELD32(0x00000001)
#define MAC_CSR13_BIT1			FIELD32(0x00000002)
#define MAC_CSR13_BIT2			FIELD32(0x00000004)
#define MAC_CSR13_BIT3			FIELD32(0x00000008)
#define MAC_CSR13_BIT4			FIELD32(0x00000010)
#define MAC_CSR13_BIT5			FIELD32(0x00000020)
#define MAC_CSR13_BIT6			FIELD32(0x00000040)
#define MAC_CSR13_BIT7			FIELD32(0x00000080)
// MAC_CSR14: LED control register.
// ON_PERIOD: On period, default 70ms.
// OFF_PERIOD: Off period, default 30ms.
// HW_LED: HW TX activity, 1: normal OFF, 0: normal ON.
// SW_LED: s/w LED, 1: ON, 0: OFF.
// HW_LED_POLARITY: 0: active low, 1: active high.
#define MAC_CSR14			0x3038
#define MAC_CSR14_ON_PERIOD		FIELD32(0x000000ff)
#define MAC_CSR14_OFF_PERIOD		FIELD32(0x0000ff00)
#define MAC_CSR14_HW_LED		FIELD32(0x00010000)
#define MAC_CSR14_SW_LED		FIELD32(0x00020000)
#define MAC_CSR14_HW_LED_POLARITY	FIELD32(0x00040000)
#define MAC_CSR14_SW_LED2		FIELD32(0x00080000)
// MAC_CSR15: NAV control.
#define MAC_CSR15			0x303c
//------------------------------------------------------------------
//     3b) EEPROM: The wordsize of the EEPROM is 16 bits.
//------------------------------------------------------------------
// E2PROM_CSR: EEPROM control register.
// RELOAD: Write 1 to reload eeprom content.
// TYPE_93C46: 1: 93c46, 0:93c66.
// LOAD_STATUS: 1:loading, 0:done.
#define E2PROM_CSR			0x3470
#define E2PROM_CSR_RELOAD		FIELD32(0x00000001)
#define E2PROM_CSR_DATA_CLOCK		FIELD32(0x00000002)
#define E2PROM_CSR_CHIP_SELECT		FIELD32(0x00000004)
#define E2PROM_CSR_DATA_IN		FIELD32(0x00000008)
#define E2PROM_CSR_DATA_OUT		FIELD32(0x00000010)
#define E2PROM_CSR_TYPE_93C46		FIELD32(0x00000020)
#define E2PROM_CSR_LOAD_STATUS		FIELD32(0x00000040)
// HW MAC address.
#define EEPROM_MAC_ADDR_0		0x0002
#define EEPROM_MAC_ADDR_BYTE0		FIELD16(0x00ff)
#define EEPROM_MAC_ADDR_BYTE1		FIELD16(0xff00)
#define EEPROM_MAC_ADDR1		0x0004
#define EEPROM_MAC_ADDR_BYTE2		FIELD16(0x00ff)
#define EEPROM_MAC_ADDR_BYTE3		FIELD16(0xff00)
#define EEPROM_MAC_ADDR_2		0x0006
#define EEPROM_MAC_ADDR_BYTE4		FIELD16(0x00ff)
#define EEPROM_MAC_ADDR_BYTE5		FIELD16(0xff00)
// EEPROM antenna.
// ANTENNA_NUM: Number of antenna's.
// TX_DEFAULT: Default antenna 0: diversity, 1: A, 2: B.
// RX_DEFAULT: Default antenna 0: diversity, 1: A, 2: B.
// FRAME_TYPE: 0: DPDT , 1: SPDT , noted this bit is valid for g only.
// DYN_TXAGC: Dynamic TX AGC control.
// HARDWARE_RADIO: 1: Hardware controlled radio. Read GPIO0.
// RF_TYPE: Rf_type of this adapter.
#define EEPROM_ANTENNA			0x0010
#define EEPROM_ANTENNA_NUM		FIELD16(0x0003)
#define EEPROM_ANTENNA_TX_DEFAULT	FIELD16(0x000c)
#define EEPROM_ANTENNA_RX_DEFAULT	FIELD16(0x0030)
#define EEPROM_ANTENNA_FRAME_TYPE	FIELD16(0x0040)
#define EEPROM_ANTENNA_DYN_TXAGC	FIELD16(0x0200)
#define EEPROM_ANTENNA_HARDWARE_RADIO	FIELD16(0x0400)
#define EEPROM_ANTENNA_RF_TYPE		FIELD16(0xf800)
// EEPROM NIC config.
// ENABLE_DIVERSITY: 1:enable, 0:disable.
// EXTERNAL_LNA_BG: External LNA enable for 2.4G.
// CARDBUS_ACCEL: 0:enable, 1:disable.
// EXTERNAL_LNA_A: External LNA enable for 5G.
#define EEPROM_NIC			0x0011
#define EEPROM_NIC_ENABLE_DIVERSITY	FIELD16(0x0001)
#define EEPROM_NIC_TX_DIVERSITY		FIELD16(0x0002)
#define EEPROM_NIC_TX_RX_FIXED		FIELD16(0x000c)
#define EEPROM_NIC_EXTERNAL_LNA_BG	FIELD16(0x0010)
#define EEPROM_NIC_CARDBUS_ACCEL	FIELD16(0x0020)
#define EEPROM_NIC_EXTERNAL_LNA_A	FIELD16(0x0040)
// EEPROM geography.
// GEO_A: Default geographical setting for 5GHz band
// GEO: Default geographical setting.
#define EEPROM_GEOGRAPHY		0x0012
#define EEPROM_GEOGRAPHY_GEO_A		FIELD16(0x00ff)
#define EEPROM_GEOGRAPHY_GEO		FIELD16(0xff00)
// EEPROM BBP.
#define EEPROM_BBP_START		0x0013
#define EEPROM_BBP_SIZE			16
#define EEPROM_BBP_VALUE		FIELD16(0x00ff)
#define EEPROM_BBP_REG_ID		FIELD16(0xff00)
// EEPROM TXPOWER 802.11G
#define EEPROM_TXPOWER_G_START		0x0023
#define EEPROM_TXPOWER_G_SIZE		7
#define EEPROM_TXPOWER_G_1		FIELD16(0x00ff)
#define EEPROM_TXPOWER_G_2		FIELD16(0xff00)
// EEPROM Frequency
#define EEPROM_FREQ			0x002f
#define EEPROM_FREQ_OFFSET		FIELD16(0x00ff)
#define EEPROM_FREQ_SEQ_MASK		FIELD16(0xff00)
#define EEPROM_FREQ_SEQ			FIELD16(0x0300)
// EEPROM LED.
// POLARITY_RDY_G: Polarity RDY_G setting.
// POLARITY_RDY_A: Polarity RDY_A setting.
// POLARITY_ACT: Polarity ACT setting.
// POLARITY_GPIO_0: Polarity GPIO0 setting.
// POLARITY_GPIO_1: Polarity GPIO1 setting.
// POLARITY_GPIO_2: Polarity GPIO2 setting.
// POLARITY_GPIO_3: Polarity GPIO3 setting.
// POLARITY_GPIO_4: Polarity GPIO4 setting.
// LED_MODE: Led mode.
#define EEPROM_LED			0x0030
#define EEPROM_LED_POLARITY_RDY_G	FIELD16(0x0001)
#define EEPROM_LED_POLARITY_RDY_A	FIELD16(0x0002)
#define EEPROM_LED_POLARITY_ACT		FIELD16(0x0004)
#define EEPROM_LED_POLARITY_GPIO_0	FIELD16(0x0008)
#define EEPROM_LED_POLARITY_GPIO_1	FIELD16(0x0010)
#define EEPROM_LED_POLARITY_GPIO_2	FIELD16(0x0020)
#define EEPROM_LED_POLARITY_GPIO_3	FIELD16(0x0040)
#define EEPROM_LED_POLARITY_GPIO_4	FIELD16(0x0080)
#define EEPROM_LED_LED_MODE		FIELD16(0x1f00)
// EEPROM TXPOWER 802.11A
#define EEPROM_TXPOWER_A_START		0x0031
#define EEPROM_TXPOWER_A_SIZE		12
#define EEPROM_TXPOWER_A_1		FIELD16(0x00ff)
#define EEPROM_TXPOWER_A_2		FIELD16(0xff00)
//------------------------------------------------------------------
//     3c) PHY control registers.
//         Some values are set in TU, whereas 1 TU == 1024 us.
//------------------------------------------------------------------
// PHY_CSR0: RF/PS control.
#define PHY_CSR0			0x3080
#define PHY_CSR0_PA_PE_BG		FIELD32(0x00010000)
#define PHY_CSR0_PA_PE_A		FIELD32(0x00020000)
// PHY_CSR1
#define PHY_CSR1			0x3084
// PHY_CSR2: Pre-TX BBP control.
#define PHY_CSR2			0x3088
// PHY_CSR3: BBP serial control register.
// VALUE: Register value to program into BBP.
// REG_NUM: Selected BBP register.
// READ_CONTROL: 0: Write BBP, 1: Read BBP.
// BUSY: 1: ASIC is busy execute BBP programming.
#define PHY_CSR3			0x308c
#define PHY_CSR3_VALUE			FIELD32(0x000000ff)
#define PHY_CSR3_REGNUM			FIELD32(0x00007f00)
#define PHY_CSR3_READ_CONTROL		FIELD32(0x00008000)
#define PHY_CSR3_BUSY			FIELD32(0x00010000)
// PHY_CSR4: RF serial control register
// VALUE: Register value (include register id) serial out to RF/IF chip.
// NUMBER_OF_BITS: Number of bits used in RFRegValue (I:20, RFMD:22).
// IF_SELECT: 1: select IF to program, 0: select RF to program.
// PLL_LD: RF PLL_LD status.
// BUSY: 1: ASIC is busy execute RF programming.
#define PHY_CSR4			0x3090
#define PHY_CSR4_VALUE			FIELD32(0x00ffffff)
#define PHY_CSR4_NUMBER_OF_BITS		FIELD32(0x1f000000)
#define PHY_CSR4_IF_SELECT		FIELD32(0x20000000)
#define PHY_CSR4_PLL_LD			FIELD32(0x40000000)
#define PHY_CSR4_BUSY			FIELD32(0x80000000)
// PHY_CSR5: RX to TX signal switch timing control.
#define PHY_CSR5			0x3094
// PHY_CSR6: TX to RX signal timing control.
#define PHY_CSR6			0x3098
// PHY_CSR7: TX DAC switching timing control.
#define PHY_CSR7			0x309c
//------------------------------------------------------------------
//     3d) MCU
//------------------------------------------------------------------
// MCU_CNTL_CSR
// SELECT_BANK: Select 8051 program bank.
// RESET: Enable 8051 reset state.
// READY: Ready state for 8051.
#define MCU_CNTL_CSR			0x000c
#define MCU_CNTL_CSR_SELECT_BANK	FIELD32(0x00000001)
#define MCU_CNTL_CSR_RESET		FIELD32(0x00000002)
#define MCU_CNTL_CSR_READY		FIELD32(0x00000004)
// MCU_INT_SOURCE_CSR: MCU interrupt source/mask register.
#define MCU_INT_SOURCE_CSR		0x0014
#define MCU_INT_SOURCE_CSR_0		FIELD32(0x00000001)
#define MCU_INT_SOURCE_CSR_1		FIELD32(0x00000002)
#define MCU_INT_SOURCE_CSR_2		FIELD32(0x00000004)
#define MCU_INT_SOURCE_CSR_3		FIELD32(0x00000008)
#define MCU_INT_SOURCE_CSR_4		FIELD32(0x00000010)
#define MCU_INT_SOURCE_CSR_5		FIELD32(0x00000020)
#define MCU_INT_SOURCE_CSR_6		FIELD32(0x00000040)
#define MCU_INT_SOURCE_CSR_7		FIELD32(0x00000080)
#define MCU_INT_SOURCE_CSR_TWAKEUP	FIELD32(0x00000100)
#define MCU_INT_SOURCE_CSR_TBTT_EXPIRE	FIELD32(0x00000200)
// MCU_INT_MASK_CSR: MCU interrupt source/mask register.
#define MCU_INT_MASK_CSR		0x0018
#define MCU_INT_MASK_CSR_0		FIELD32(0x00000001)
#define MCU_INT_MASK_CSR_1		FIELD32(0x00000002)
#define MCU_INT_MASK_CSR_2		FIELD32(0x00000004)
#define MCU_INT_MASK_CSR_3		FIELD32(0x00000008)
#define MCU_INT_MASK_CSR_4		FIELD32(0x00000010)
#define MCU_INT_MASK_CSR_5		FIELD32(0x00000020)
#define MCU_INT_MASK_CSR_6		FIELD32(0x00000040)
#define MCU_INT_MASK_CSR_7		FIELD32(0x00000080)
#define MCU_INT_MASK_CSR_TWAKEUP	FIELD32(0x00000100)
#define MCU_INT_MASK_CSR_TBTT_EXPIRE	FIELD32(0x00000200)
// HOST-MCU shared memory.
// H2M_MAILBOX_CSR: Host-to-MCU Mailbox.
#define H2M_MAILBOX_CSR			0x2100
#define H2M_MAILBOX_CSR_ARG0		FIELD32(0x000000ff)
#define H2M_MAILBOX_CSR_ARG1		FIELD32(0x0000ff00)
#define H2M_MAILBOX_CSR_CMD_TOKEN	FIELD32(0x00ff0000)
#define H2M_MAILBOX_CSR_OWNER		FIELD32(0xff000000)
// MCU_LEDCS: LED control for MCU Mailbox.
#define MCU_LEDCS_LED_MODE		FIELD16(0x001f)
#define MCU_LEDCS_RADIO_STATUS		FIELD16(0x0020)
#define MCU_LEDCS_LINK_BG_STATUS	FIELD16(0x0040)
#define MCU_LEDCS_LINK_A_STATUS		FIELD16(0x0080)
#define MCU_LEDCS_POLARITY_GPIO_0	FIELD16(0x0100)
#define MCU_LEDCS_POLARITY_GPIO_1	FIELD16(0x0200)
#define MCU_LEDCS_POLARITY_GPIO_2	FIELD16(0x0400)
#define MCU_LEDCS_POLARITY_GPIO_3	FIELD16(0x0800)
#define MCU_LEDCS_POLARITY_GPIO_4	FIELD16(0x1000)
#define MCU_LEDCS_POLARITY_ACT		FIELD16(0x2000)
#define MCU_LEDCS_POLARITY_READY_BG	FIELD16(0x4000)
#define MCU_LEDCS_POLARITY_READY_A	FIELD16(0x8000)
// M2H_CMD_DONE_CSR.
#define M2H_CMD_DONE_CSR		0x2104
// MCU_TXOP_ARRAY_BASE.
#define MCU_TXOP_ARRAY_BASE		0x2110
// MCU mailbox commands.
#define MCU_SLEEP			0x30
#define MCU_WAKEUP			0x31
#define MCU_LED				0x50
#define MCU_LED_STRENGTH		0x52
//------------------------------------------------------------------
//     3e) Interrupt registers
//------------------------------------------------------------------
// INT_SOURCE_CSR: Interrupt source register.
// Write one to clear corresponding bit.
#define INT_SOURCE_CSR			0x3468
#define INT_SOURCE_CSR_TXDONE		FIELD32(0x00000001)
#define INT_SOURCE_CSR_RXDONE		FIELD32(0x00000002)
#define INT_SOURCE_CSR_BEACON_DONE	FIELD32(0x00000004)
#define INT_SOURCE_CSR_TX_ABORT_DONE	FIELD32(0x00000010)
#define INT_SOURCE_CSR_AC0_DMA_DONE	FIELD32(0x00010000)
#define INT_SOURCE_CSR_AC1_DMA_DONE	FIELD32(0x00020000)
#define INT_SOURCE_CSR_AC2_DMA_DONE	FIELD32(0x00040000)
#define INT_SOURCE_CSR_AC3_DMA_DONE	FIELD32(0x00080000)
#define INT_SOURCE_CSR_MGMT_DMA_DONE	FIELD32(0x00100000)
#define INT_SOURCE_CSR_HCCA_DMA_DONE	FIELD32(0x00200000)
// INT_MASK_CSR: Interrupt MASK register. 1: the interrupt is mask OFF.
// MITIGATION_PERIOD: Interrupt mitigation in unit of 32 PCI clock.
#define INT_MASK_CSR			0x346c
#define INT_MASK_CSR_TXDONE		FIELD32(0x00000001)
#define INT_MASK_CSR_RXDONE		FIELD32(0x00000002)
#define INT_MASK_CSR_BEACON_DONE	FIELD32(0x00000004)
#define INT_MASK_CSR_TX_ABORT_DONE	FIELD32(0x00000010)
#define INT_MASK_CSR_ENABLE_MITIGATION	FIELD32(0x00000080)
#define INT_MASK_CSR_MITIGATION_PERIOD	FIELD32(0x0000ff00)
#define INT_MASK_CSR_AC0_DMA_DONE	FIELD32(0x00010000)
#define INT_MASK_CSR_AC1_DMA_DONE	FIELD32(0x00020000)
#define INT_MASK_CSR_AC2_DMA_DONE	FIELD32(0x00040000)
#define INT_MASK_CSR_AC3_DMA_DONE	FIELD32(0x00080000)
#define INT_MASK_CSR_MGMT_DMA_DONE	FIELD32(0x00100000)
#define INT_MASK_CSR_HCCA_DMA_DONE	FIELD32(0x00200000)
//------------------------------------------------------------------
//     3f) STA control registers.
//------------------------------------------------------------------
// STA_CSR0: RX PLCP error count & RX CRC error count.
#define STA_CSR0			0x30c0
#define STA_CSR0_CRC_ERROR		FIELD32(0x0000ffff)
#define STA_CSR0_PLCP_ERROR		FIELD32(0xffff0000)
// STA_CSR1: RX False CCA count & RX LONG frame count.
#define STA_CSR1			0x30c4
#define STA_CSR1_PHYSICAL_ERROR		FIELD32(0x0000ffff)
#define STA_CSR1_FALSE_CCA_ERROR	FIELD32(0xffff0000)
// STA_CSR2: TX Beacon count and RX FIFO overflow count.
#define STA_CSR2			0x30c8
#define STA_CSR2_RX_FIFO_OVERFLOW_COUNT	FIELD32(0x0000ffff)
#define STA_CSR2_RX_OVERFLOW_COUNT	FIELD32(0xffff0000)
// STA_CSR3: TX Beacon count.
#define STA_CSR3			0x30cc
#define STA_CSR3_TX_BEACON_COUNT	FIELD32(0x0000ffff)
// STA_CSR4: TX Result status register.
// VALID: 1:This register contains a valid TX result.
#define STA_CSR4			0x30d0
#define STA_CSR4_VALID			FIELD32(0x00000001)
#define STA_CSR4_TX_RESULT		FIELD32(0x0000000e)
#define STA_CSR4_RETRY_COUNT		FIELD32(0x000000f0)
#define STA_CSR4_PID_SUBTYPE		FIELD32(0x00001f00)
#define STA_CSR4_PID_TYPE		FIELD32(0x0000e000)
#define STA_CSR4_TXRATE			FIELD32(0x000f0000)
//------------------------------------------------------------------
//     3g) TXRX control registers.
//         Some values are set in TU, whereas 1 TU == 1024 us.
//------------------------------------------------------------------
// TXRX_CSR0: TX/RX configuration register.
// TSF_OFFSET: Default is 24.
// AUTO_TX_SEQ: 1: ASIC auto replace sequence nr in outgoing frame.
// DISABLE_RX: Disable Rx engine.
// DROP_CRC: Drop CRC error.
// DROP_PHYSICAL: Drop physical error.
// DROP_CONTROL: Drop control frame.
// DROP_NOT_TO_ME: Drop not to me unicast frame.
// DROP_TO_DS: Drop fram ToDs bit is true.
// DROP_VERSION_ERROR: Drop version error frame.
// DROP_MULTICAST: Drop multicast frames.
// DROP_BORADCAST: Drop broadcast frames.
// ROP_ACK_CTS: Drop received ACK and CTS.
#define TXRX_CSR0			0x3040
#define TXRX_CSR0_RX_ACK_TIMEOUT	FIELD32(0x000001ff)
#define TXRX_CSR0_TSF_OFFSET		FIELD32(0x00007e00)
#define TXRX_CSR0_AUTO_TX_SEQ		FIELD32(0x00008000)
#define TXRX_CSR0_DISABLE_RX		FIELD32(0x00010000)
#define TXRX_CSR0_DROP_CRC		FIELD32(0x00020000)
#define TXRX_CSR0_DROP_PHYSICAL		FIELD32(0x00040000)
#define TXRX_CSR0_DROP_CONTROL		FIELD32(0x00080000)
#define TXRX_CSR0_DROP_NOT_TO_ME	FIELD32(0x00100000)
#define TXRX_CSR0_DROP_TO_DS		FIELD32(0x00200000)
#define TXRX_CSR0_DROP_VERSION_ERROR	FIELD32(0x00400000)
#define TXRX_CSR0_DROP_MULTICAST	FIELD32(0x00800000)
#define TXRX_CSR0_DROP_BORADCAST	FIELD32(0x01000000)
#define TXRX_CSR0_DROP_ACK_CTS		FIELD32(0x02000000)
#define TXRX_CSR0_TX_WITHOUT_WAITING	FIELD32(0x04000000)
// TXRX_CSR1
#define TXRX_CSR1			0x3044
// TXRX_CSR2
#define TXRX_CSR2			0x3048
// TXRX_CSR3
#define TXRX_CSR3			0x304c
// TXRX_CSR4: Auto-Responder/Tx-retry register.
// AUTORESPOND_PREAMBLE: 0:long, 1:short preamble.
// OFDM_TX_RATE_DOWN: 1:enable.
// OFDM_TX_RATE_STEP: 0:1-step, 1: 2-step, 2:3-step, 3:4-step.
// OFDM_TX_FALLBACK_CCK: 0: Fallback to OFDM 6M only, 1: Fallback to CCK 1M,2M.
#define TXRX_CSR4			0x3050
#define TXRX_CSR4_TX_ACK_TIMEOUT	FIELD32(0x000000ff)
#define TXRX_CSR4_CNTL_ACK_POLICY	FIELD32(0x00000700)
#define TXRX_CSR4_ACK_CTS_PSM		FIELD32(0x00010000)
#define TXRX_CSR4_AUTORESPOND_ENABLE	FIELD32(0x00020000)
#define TXRX_CSR4_AUTORESPOND_PREAMBLE	FIELD32(0x00040000)
#define TXRX_CSR4_OFDM_TX_RATE_DOWN	FIELD32(0x00080000)
#define TXRX_CSR4_OFDM_TX_RATE_STEP	FIELD32(0x00300000)
#define TXRX_CSR4_OFDM_TX_FALLBACK_CCK	FIELD32(0x00400000)
#define TXRX_CSR4_LONG_RETRY_LIMIT	FIELD32(0x0f000000)
#define TXRX_CSR4_SHORT_RETRY_LIMIT	FIELD32(0xf0000000)
// TXRX_CSR5
#define TXRX_CSR5			0x3054
// ACK/CTS payload consumed time registers.
#define TXRX_CSR6			0x3058
#define TXRX_CSR7			0x305c
#define TXRX_CSR8			0x3060
// TXRX_CSR9: Synchronization control register.
// BEACON_INTERVAL: In unit of 1/16 TU.
// TSF_TICKING: Enable TSF auto counting.
// TSF_SYNC_MODE: Enable TSF sync, 0: disable, 1: infra mode, 2: ad-hoc mode.
// BEACON_GEN: Enable beacon generator.
#define TXRX_CSR9			0x3064
#define TXRX_CSR9_BEACON_INTERVAL	FIELD32(0x0000ffff)
#define TXRX_CSR9_TSF_TICKING		FIELD32(0x00010000)
#define TXRX_CSR9_TSF_SYNC_MODE		FIELD32(0x00060000)
#define TXRX_CSR9_TBTT_ENABLE		FIELD32(0x00080000)
#define TXRX_CSR9_BEACON_GEN		FIELD32(0x00100000)
#define TXRX_CSR9_TIMESTAMP_COMPENSATE	FIELD32(0xff000000)
// TXRX_CSR10: BEACON alignment.
#define TXRX_CSR10			0x3068
// TXRX_CSR11: AES mask.
#define TXRX_CSR11			0x306c
// TXRX_CSR12: TSF low 32.
#define TXRX_CSR12			0x3070
#define TXRX_CSR12_LOW_TSFTIMER		FIELD32(0xffffffff)
// TXRX_CSR13: TSF high 32.
#define TXRX_CSR13			0x3074
#define TXRX_CSR13_HIGH_TSFTIMER	FIELD32(0xffffffff)
// TXRX_CSR14: TBTT timer.
#define TXRX_CSR14			0x3078
// TXRX_CSR15: TKIP MIC priority byte "AND" mask.
#define TXRX_CSR15			0x307c
//------------------------------------------------------------------
//     3h) Security control register.
//------------------------------------------------------------------
// SEC_CSR0: Shared key table control.
#define SEC_CSR0			0x30a0
// SEC_CSR1: Shared key table security mode register.
#define SEC_CSR1			0x30a4
#define SEC_CSR1_BSS0_KEY0_CIPHER_ALG	FIELD32(0x00000007)
#define SEC_CSR1_BSS0_KEY1_CIPHER_ALG	FIELD32(0x00000070)
#define SEC_CSR1_BSS0_KEY2_CIPHER_ALG	FIELD32(0x00000700)
#define SEC_CSR1_BSS0_KEY3_CIPHER_ALG	FIELD32(0x00007000)
#define SEC_CSR1_BSS1_KEY0_CIPHER_ALG	FIELD32(0x00070000)
#define SEC_CSR1_BSS1_KEY1_CIPHER_ALG	FIELD32(0x00700000)
#define SEC_CSR1_BSS1_KEY2_CIPHER_ALG	FIELD32(0x07000000)
#define SEC_CSR1_BSS1_KEY3_CIPHER_ALG	FIELD32(0x70000000)
// Pairwise key table valid bitmap registers.
// SEC_CSR2: pairwise key table valid bitmap 0.
// SEC_CSR3: pairwise key table valid bitmap 1.
#define SEC_CSR2			0x30a8
#define SEC_CSR3			0x30ac
// SEC_CSR4: Pairwise key table lookup control.
#define SEC_CSR4			0x30b0
// SEC_CSR5: shared key table security mode register.
#define SEC_CSR5			0x30b4
#define SEC_CSR5_BSS2_KEY0_CIPHER_ALG	FIELD32(0x00000007)
#define SEC_CSR5_BSS2_KEY1_CIPHER_ALG	FIELD32(0x00000070)
#define SEC_CSR5_BSS2_KEY2_CIPHER_ALG	FIELD32(0x00000700)
#define SEC_CSR5_BSS2_KEY3_CIPHER_ALG	FIELD32(0x00007000)
#define SEC_CSR5_BSS3_KEY0_CIPHER_ALG	FIELD32(0x00070000)
#define SEC_CSR5_BSS3_KEY1_CIPHER_ALG	FIELD32(0x00700000)
#define SEC_CSR5_BSS3_KEY2_CIPHER_ALG	FIELD32(0x07000000)
#define SEC_CSR5_BSS3_KEY3_CIPHER_ALG	FIELD32(0x70000000)
//------------------------------------------------------------------
//     3i) Host DMA registers.
//------------------------------------------------------------------
// AC0_BASE_CSR: AC_BK base address.
#define AC0_BASE_CSR			0x3400
#define AC0_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// AC1_BASE_CSR: AC_BE base address.
#define AC1_BASE_CSR			0x3404
#define AC1_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// AC2_BASE_CSR: AC_VI base address.
#define AC2_BASE_CSR			0x3408
#define AC2_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// AC3_BASE_CSR: AC_VO base address.
#define AC3_BASE_CSR			0x340c
#define AC3_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// MGMT_BASE_CSR: MGMT ring base address.
#define MGMT_BASE_CSR			0x3410
#define MGMT_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// TX_RING_CSR0: TX Ring size for AC_BK, AC_BE, AC_VI, AC_VO.
#define TX_RING_CSR0			0x3418
#define TX_RING_CSR0_AC0_RING_SIZE	FIELD32(0x000000ff)
#define TX_RING_CSR0_AC1_RING_SIZE	FIELD32(0x0000ff00)
#define TX_RING_CSR0_AC2_RING_SIZE	FIELD32(0x00ff0000)
#define TX_RING_CSR0_AC3_RING_SIZE	FIELD32(0xff000000)
// TX_RING_CSR1: TX Ring size for MGMT Ring, HCCA Ring
// TXD_SIZE: In unit of 32-bit.
#define TX_RING_CSR1			0x341c
#define TX_RING_CSR1_MGMT_RING_SIZE	FIELD32(0x000000ff)
#define TX_RING_CSR1_HCCA_RING_SIZE	FIELD32(0x0000ff00)
#define TX_RING_CSR1_TXD_SIZE		FIELD32(0x003f0000)
// AIFSN_CSR: AIFSN for each EDCA AC.
// AIFSN0: For AC_BK.
// AIFSN1: For AC_BE.
// AIFSN2: For AC_VI.
// AIFSN3: For AC_VO.
#define AIFSN_CSR			0x3420
#define AIFSN_CSR_AIFSN0		FIELD32(0x0000000f)
#define AIFSN_CSR_AIFSN1		FIELD32(0x000000f0)
#define AIFSN_CSR_AIFSN2		FIELD32(0x00000f00)
#define AIFSN_CSR_AIFSN3		FIELD32(0x0000f000)
// CWMIN_CSR: CWmin for each EDCA AC.
// CWMIN0: For AC_BK.
// CWMIN1: For AC_BE.
// CWMIN2: For AC_VI.
// CWMIN3: For AC_VO.
#define CWMIN_CSR			0x3424
#define CWMIN_CSR_CWMIN0		FIELD32(0x0000000f)
#define CWMIN_CSR_CWMIN1		FIELD32(0x000000f0)
#define CWMIN_CSR_CWMIN2		FIELD32(0x00000f00)
#define CWMIN_CSR_CWMIN3		FIELD32(0x0000f000)
// CWMAX_CSR: CWmax for each EDCA AC.
// CWMAX0: For AC_BK.
// CWMAX1: For AC_BE.
// CWMAX2: For AC_VI.
// CWMAX3: For AC_VO.
#define CWMAX_CSR			0x3428
#define CWMAX_CSR_CWMAX0		FIELD32(0x0000000f)
#define CWMAX_CSR_CWMAX1		FIELD32(0x000000f0)
#define CWMAX_CSR_CWMAX2		FIELD32(0x00000f00)
#define CWMAX_CSR_CWMAX3		FIELD32(0x0000f000)
// TX_DMA_DST_CSR
#define TX_DMA_DST_CSR			0x342c
// TX_CNTL_CSR: KICK/Abort TX.
// KICK_TX_AC0: For AC_BK.
// KICK_TX_AC1: For AC_BE.
// KICK_TX_AC2: For AC_VI.
// KICK_TX_AC3: For AC_VO.
// ABORT_TX_AC0: For AC_BK.
// ABORT_TX_AC1: For AC_BE.
// ABORT_TX_AC2: For AC_VI.
// ABORT_TX_AC3: For AC_VO.
#define TX_CNTL_CSR			0x3430
#define TX_CNTL_CSR_KICK_TX_AC0		FIELD32(0x00000001)
#define TX_CNTL_CSR_KICK_TX_AC1		FIELD32(0x00000002)
#define TX_CNTL_CSR_KICK_TX_AC2		FIELD32(0x00000004)
#define TX_CNTL_CSR_KICK_TX_AC3		FIELD32(0x00000008)
#define TX_CNTL_CSR_KICK_TX_MGMT	FIELD32(0x00000010)
#define TX_CNTL_CSR_ABORT_TX_AC0	FIELD32(0x00010000)
#define TX_CNTL_CSR_ABORT_TX_AC1	FIELD32(0x00020000)
#define TX_CNTL_CSR_ABORT_TX_AC2	FIELD32(0x00040000)
#define TX_CNTL_CSR_ABORT_TX_AC3	FIELD32(0x00080000)
#define TX_CNTL_CSR_ABORT_TX_MGMT	FIELD32(0x00100000)
// LOAD_TX_RING_CSR
#define LOAD_TX_RING_CSR		0x3434
// Several read-only registers, for debugging.
#define AC0_TXPTR_CSR			0x3438
#define AC1_TXPTR_CSR			0x343c
#define AC2_TXPTR_CSR			0x3440
#define AC3_TXPTR_CSR			0x3444
#define MGMT_TXPTR_CSR			0x3448
// RX_BASE_CSR
#define RX_BASE_CSR			0x3450
#define RX_BASE_CSR_RING_REGISTER	FIELD32(0xffffffff)
// RX_RING_CSR.
// RXD_SIZE: In unit of 32-bit.
#define RX_RING_CSR			0x3454
#define RX_RING_CSR_RING_SIZE		FIELD32(0x000000ff)
#define RX_RING_CSR_RXD_SIZE		FIELD32(0x00003f00)
#define RX_RING_CSR_RXD_WRITEBACK_SIZE	FIELD32(0x00070000)
// RX_CNTL_CSR
#define RX_CNTL_CSR			0x3458
#define SEC_CSR5_BSS3_KEY3_CIPHER_ALG	FIELD32(0x70000000)
//------------------------------------------------------------------
//     3j) RF registers
//------------------------------------------------------------------
#define RF3_TXPOWER			FIELD32(0x00003e00)
#define RF4_FREQ_OFFSET			FIELD32(0x0003f000)
//------------------------------------------------------------------
//     3k) AC_TXOP registers
//------------------------------------------------------------------
// AC_TXOP_CSR0: AC_BK/AC_BE TXOP register.
// AC0_TX_OP: For AC_BK, in unit of 32us.
// AC1_TX_OP: For AC_BE, in unit of 32us.
#define AC_TXOP_CSR0			0x3474
#define AC_TXOP_CSR0_AC0_TX_OP		FIELD32(0x0000ffff)
#define AC_TXOP_CSR0_AC1_TX_OP		FIELD32(0xffff0000)
// AC_TXOP_CSR1: AC_VO/AC_VI TXOP register.
// AC2_TX_OP: For AC_VI, in unit of 32us.
// AC3_TX_OP: For AC_VO, in unit of 32us.
#define AC_TXOP_CSR1			0x3478
#define AC_TXOP_CSR1_AC2_TX_OP		FIELD32(0x0000ffff)
#define AC_TXOP_CSR1_AC3_TX_OP		FIELD32(0xffff0000)
// --------------------------------------------
//  4) TX DESCRIPTOR
// --------------------------------------------
// DMA TX descriptor defines.
#define TXD_DESC_SIZE ( 16 * sizeof(u32) )
// Word0
// TKIP_MIC: ASIC appends TKIP MIC if TKIP is used.
// KEY_TABLE: Use per-client pairwise KEY table.
// KEY_INDEX:
// Key index (0~31) to the pairwise KEY table.
// 0~3 to shared KEY table 0 (BSS0).
// 4~7 to shared KEY table 1 (BSS1).
// 8~11 to shared KEY table 2 (BSS2).
// 12~15 to shared KEY table 3 (BSS3).
// BURST: Next frame belongs to same "burst" event.
#define TXD_W0_OWNER_NIC		FIELD32(0x00000001)
#define TXD_W0_VALID			FIELD32(0x00000002)
#define TXD_W0_MORE_FRAG		FIELD32(0x00000004)
#define TXD_W0_ACK			FIELD32(0x00000008)
#define TXD_W0_TIMESTAMP		FIELD32(0x00000010)
#define TXD_W0_OFDM			FIELD32(0x00000020)
#define TXD_W0_IFS			FIELD32(0x00000040)
#define TXD_W0_RETRY_MODE		FIELD32(0x00000080)
#define TXD_W0_TKIP_MIC			FIELD32(0x00000100)
#define TXD_W0_KEY_TABLE		FIELD32(0x00000200)
#define TXD_W0_KEY_INDEX		FIELD32(0x0000fc00)
#define TXD_W0_DATABYTE_COUNT		FIELD32(0x0fff0000)
#define TXD_W0_BURST			FIELD32(0x10000000)
#define TXD_W0_CIPHER_ALG		FIELD32(0xe0000000)
// Word1
// HOST_Q_ID: EDCA/HCCA queue ID.
// HW_SEQUENCE: MAC overwrites the frame sequence number.
// BUFFER_COUNT: Number of buffers in this TXD.
#define TXD_W1_HOST_Q_ID		FIELD32(0x0000000f)
#define TXD_W1_AIFSN			FIELD32(0x000000f0)
#define TXD_W1_CWMIN			FIELD32(0x00000f00)
#define TXD_W1_CWMAX			FIELD32(0x0000f000)
#define TXD_W1_IV_OFFSET		FIELD32(0x003f0000)
#define TXD_W1_PIGGY_BACK		FIELD32(0x01000000)
#define TXD_W1_HW_SEQUENCE		FIELD32(0x10000000)
#define TXD_W1_BUFFER_COUNT		FIELD32(0xe0000000)
// Word2: PLCP information
#define TXD_W2_PLCP_SIGNAL		FIELD32(0x000000ff)
#define TXD_W2_PLCP_SERVICE		FIELD32(0x0000ff00)
#define TXD_W2_PLCP_LENGTH_LOW		FIELD32(0x00ff0000)
#define TXD_W2_PLCP_LENGTH_HIGH		FIELD32(0xff000000)
// Word3
#define TXD_W3_IV			FIELD32(0xffffffff)
// Word4
#define TXD_W4_EIV			FIELD32(0xffffffff)
// Word5
// FRAME_OFFSET: Frame start offset inside ASIC TXFIFO (after TXINFO field).
// TXD_W5_PID_SUBTYPE: Driver assigned packet ID index for txdone handler.
// TXD_W5_PID_TYPE: Driver assigned packet ID type for txdone handler.
// WAITING_DMA_DONE_INT: TXD been filled with data
// and waiting for TxDoneISR housekeeping.
#define TXD_W5_FRAME_OFFSET		FIELD32(0x000000ff)
#define TXD_W5_PID_SUBTYPE		FIELD32(0x00001f00)
#define TXD_W5_PID_TYPE			FIELD32(0x0000e000)
#define TXD_W5_TX_POWER			FIELD32(0x00ff0000)
#define TXD_W5_WAITING_DMA_DONE_INT	FIELD32(0x01000000)
// the above 24-byte is called TXINFO and will be DMAed to MAC block
// through TXFIFO. MAC block use this TXINFO to control the transmission
// behavior of this frame.
// The following fields are not used by MAC block.
// They are used by DMA block and HOST driver only.
// Once a frame has been DMA to ASIC, all the following fields are useless
// to ASIC.

// Word6-10: Buffer physical address
#define TXD_W6_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
#define TXD_W7_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
#define TXD_W8_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
#define TXD_W9_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
#define TXD_W10_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
// Word11-13: Buffer length
#define TXD_W11_BUFFER_LENGTH0		FIELD32(0x00000fff)
#define TXD_W11_BUFFER_LENGTH1		FIELD32(0x0fff0000)
#define TXD_W12_BUFFER_LENGTH2		FIELD32(0x00000fff)
#define TXD_W12_BUFFER_LENGTH3		FIELD32(0x0fff0000)
#define TXD_W13_BUFFER_LENGTH4		FIELD32(0x00000fff)
// Word14
#define TXD_W14_SK_BUFFER		FIELD32(0xffffffff)
// Word15
#define TXD_W15_NEXT_SK_BUFFER		FIELD32(0xffffffff)
// --------------------------------------------
//  5) RX DESCRIPTOR
// --------------------------------------------
// DMA RX descriptor define
#define RXD_DESC_SIZE			( 16 * sizeof(u32) )
// Word0
// CIPHER_ERROR: 1:ICV error, 2:MIC error, 3:invalid key.
// KEY_INDEX: Decryption key actually used.
#define RXD_W0_OWNER_NIC		FIELD32(0x00000001)
#define RXD_W0_DROP			FIELD32(0x00000002)
#define RXD_W0_UNICAST_TO_ME		FIELD32(0x00000004)
#define RXD_W0_MULTICAST		FIELD32(0x00000008)
#define RXD_W0_BROADCAST		FIELD32(0x00000010)
#define RXD_W0_MY_BSS			FIELD32(0x00000020)
#define RXD_W0_CRC			FIELD32(0x00000040)
#define RXD_W0_OFDM			FIELD32(0x00000080)
#define RXD_W0_CIPHER_ERROR		FIELD32(0x00000300)
#define RXD_W0_KEY_INDEX		FIELD32(0x0000fc00)
#define RXD_W0_DATABYTE_COUNT		FIELD32(0x0fff0000)
#define RXD_W0_CIPHER_ALG		FIELD32(0xe0000000)
// Word1
// SIGNAL: RX raw data rate reported by BBP.
// RSSI: RSSI reported by BBP.
#define RXD_W1_SIGNAL			FIELD32(0x000000ff)
#define RXD_W1_RSSI			FIELD32(0x0000ff00)
#define RXD_W1_FRAME_OFFSET		FIELD32(0x7f000000)
// Word2
// IV: Received IV of originally encrypted.
#define RXD_W2_IV			FIELD32(0xffffffff)
// Word3
// EIV: Received EIV of originally encrypted.
#define RXD_W3_EIV			FIELD32(0xffffffff)
// Word4
#define RXD_W4_RESERVED			FIELD32(0xffffffff)
// the above 20-byte is called RXINFO and will be DMAed to MAC RX block
// and passed to the HOST driver.
// The following fields are for DMA block and HOST usage only.
// Can't be touched by ASIC MAC block.

// Word5
#define RXD_W5_BUFFER_PHYSICAL_ADDRESS	FIELD32(0xffffffff)
// Word6-15: Reserved
#define RXD_W6_RESERVED			FIELD32(0xffffffff)
#define RXD_W7_RESERVED			FIELD32(0xffffffff)
#define RXD_W8_RESERVED			FIELD32(0xffffffff)
#define RXD_W9_RESERVED			FIELD32(0xffffffff)
#define RXD_W10_RESERVED		FIELD32(0xffffffff)
#define RXD_W11_RESERVED		FIELD32(0xffffffff)
#define RXD_W12_RESERVED		FIELD32(0xffffffff)
#define RXD_W13_RESERVED		FIELD32(0xffffffff)
#define RXD_W14_RESERVED		FIELD32(0xffffffff)
#define RXD_W15_RESERVED		FIELD32(0xffffffff)
// --------------------------------------------
//  6) CRC functions
// --------------------------------------------
#define FCS_LEN 4
const u16 crc_itu_t_table[256] = {
   0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,
   0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,
   0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
   0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,
   0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,
   0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
   0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,
   0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,
   0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
   0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,
   0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,
   0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
   0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,
   0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,
   0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
   0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,
   0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,
   0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
   0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,
   0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,
   0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
   0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,
   0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,
   0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
   0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,
   0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,
   0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
   0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,
   0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,
   0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
   0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,
   0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0
};
//------------------------------------------------------------------
static inline u16 crc_itu_t_byte(u16 crc, const u8 data)
{
   return (crc << 8) ^ crc_itu_t_table[((crc >> 8) ^ data) & 0xff];
}
//------------------------------------------------------------------
static u16 crc_itu_t(u16 crc, const u8 *buffer, size_t len)
{
   while (len--)
      crc = crc_itu_t_byte(crc, *buffer++);
   return crc;
}
// --------------------------------------------
//  7) Chipset identification
// --------------------------------------------
// Chipset identification
// The chipset on the device is composed of a RT and RF chip.
// The chipset combination is important for determining device capabilities.
//------------------------------------------------------------------
struct rt2x00_chip {
   u16 rt;
   u16 rf;
   u32 rev;
   u8 fw_h;
   u8 fw_l;
};
// RT chip defines.
#define RT2561				0x0301
#define RT2561s				0x0302
#define RT2661				0x0401
// RF chip defines.
#define RF5225				0x0001
#define RF5325				0x0002
#define RF2527				0x0003
#define RF2529				0x0004
// Set chipset data.
static inline void rt2x00_set_chip(struct rt2x00_chip *chipset,
                                   const u16 rt, const u16 rf, const u32 rev)
{
   INFO("Chipset detected - rt: %04x, rf: %04x, rev: %08x.\n",
        rt, rf, rev);

   chipset->rt = rt;
   chipset->rf = rf;
   chipset->rev = rev;
}
//------------------------------------------------------------------
static inline void rt2x00_set_chip_fw(struct rt2x00_chip *chipset,
                                      const u8 fw_h, const u8 fw_l)
{
   INFO("Firmware detected - version: %d.%d.\n", fw_h, fw_l);

   chipset->fw_h = fw_h;
   chipset->fw_l = fw_l;
}
//------------------------------------------------------------------
static inline char rt2x00_rt(const struct rt2x00_chip *chipset, const u16 chip)
{
   return (chipset->rt == chip);
}
//------------------------------------------------------------------
static inline char rt2x00_rf(const struct rt2x00_chip *chipset, const u16 chip)
{
   return (chipset->rf == chip);
}
//------------------------------------------------------------------
static inline u16 rt2x00_rev(const struct rt2x00_chip *chipset)
{
   return chipset->rev;
}
//------------------------------------------------------------------
static inline char* rt2x00_fw(const struct rt2x00_chip *chipset)
{
   return chipset->fw_h + "." + chipset->fw_l;
}
// --------------------------------------------
//  8) RINGS
// --------------------------------------------
// data_entry
//------------------------------------------------------------------
// The data ring is a list of data entries.
// Each entry holds a reference to the descriptor
// and the data buffer.
struct data_entry {
  // Status flags
   unsigned int flags;
#define ENTRY_OWNER_NIC	0x00000001
#define ENTRY_RTS_FRAME	0x00000002
  // Ring we belong to.
   struct data_ring *ring;
   // private pointer specific to driver.
   void *priv;
  // Data address for this entry.
   void *data_addr;
   dma_addr_t data_dma;
};
//------------------------------------------------------------------
// data_ring
//------------------------------------------------------------------
// Data rings are used by the device to send and receive packets.
// The data_addr is the base address of the data memory.
// To determine at which point in the ring we are,
// have to use the rt2x00_ring_index_*() functions.
//------------------------------------------------------------------
struct ieee80211_tx_queue_stats_data {
   unsigned int len; /* num packets in queue */
   unsigned int limit; /* queue len (soft) limit */
   unsigned int count; /* total num frames sent */
};
//------------------------------------------------------------------
struct data_ring {
  // Base address for the device specific data entries.
   struct data_entry *entry;
  // TX queue statistic info.
   struct ieee80211_tx_queue_stats_data stats;
  // Base address for data ring.
   dma_addr_t data_dma;
   void *data_addr;
  // Index variables.
   u8 index;
   u8 index_done;
  // Ring type.
   u16 type;
  // Size of packet and descriptor in bytes.
   u16 data_size;
   u16 desc_size;
};
//------------------------------------------------------------------
// Handlers to determine the address of the current device specific
// data entry, where either index or index_done points to.
//------------------------------------------------------------------
static inline struct data_entry* rt2x00_get_data_entry(
      struct data_ring *ring)
{
   return &ring->entry[ring->index];
}
//------------------------------------------------------------------
static inline struct data_entry* rt2x00_get_data_entry_done(
      struct data_ring *ring)
{
   return &ring->entry[ring->index_done];
}
//------------------------------------------------------------------
// Total ring memory
//------------------------------------------------------------------
static inline int rt2x00_get_ring_size(struct data_ring *ring)
{
   return ring->stats.limit * (ring->desc_size + ring->data_size);
}
//------------------------------------------------------------------
// Ring index manipulation functions.
//------------------------------------------------------------------
static inline int rt2x00_ring_full(struct data_ring *ring)
{
   return ring->stats.len == ring->stats.limit;
}
//------------------------------------------------------------------
static inline int rt2x00_ring_empty(struct data_ring *ring)
{
   return ring->stats.len == 0;
}
//------------------------------------------------------------------
static inline void rt2x00_ring_index_inc(struct data_ring *ring)
{
   ring->index++;
   if (ring->index >= ring->stats.limit)
      ring->index = 0;
   ring->stats.len++;
}
//------------------------------------------------------------------
static inline void rt2x00_ring_index_done_inc(struct data_ring *ring)
{
   ring->index_done++;
   if (ring->index_done >= ring->stats.limit)
      ring->index_done = 0;
   ring->stats.len--;
   ring->stats.count++;
}
//------------------------------------------------------------------
static inline void rt2x00_ring_index_clear(struct data_ring *ring)
{
   ring->index = 0;
   ring->index_done = 0;
   ring->stats.len = 0;
   ring->stats.count = 0;
}
//------------------------------------------------------------------
enum ring_index {
   RING_AC_VO = 0,
   RING_RX = 1,
   RING_NUM = 2
};
//------------------------------------------------------------------
enum {
   IEEE80211_TX_QUEUE_DATA0 = 0, /* used for EDCA AC_VO data */
   IEEE80211_TX_QUEUE_DATA1 = 1, /* used for EDCA AC_VI data */
   IEEE80211_TX_QUEUE_DATA2 = 2, /* used for EDCA AC_BE data */
   IEEE80211_TX_QUEUE_DATA3 = 3, /* used for EDCA AC_BK data */
   IEEE80211_TX_QUEUE_DATA4 = 4,
   IEEE80211_TX_QUEUE_AFTER_BEACON = 6,
   IEEE80211_TX_QUEUE_BEACON = 7
};
//------------------------------------------------------------------
// Ring sizes.
// Ralink PCI devices demand the Frame size to be a multiple of 128 bytes.
// DATA_FRAME_SIZE is used for TX and RX rings.
//------------------------------------------------------------------
#define DATA_FRAME_SIZE	2432
//------------------------------------------------------------------
// Number of entries in a packet ring.
//------------------------------------------------------------------
#define RX_ENTRIES	12
#define TX_ENTRIES	12
//------------------------------------------------------------------
// RX CIRCULAR RING for storing received frames
//------------------------------------------------------------------
typedef struct {
   u8 head, tail, count;
   wifi_frame_t frames [RX_QUEUE_SIZE];
} wifi_ring_t;
//------------------------------------------------------------------
static void init_ring_buffer (wifi_ring_t *ring) {
   ring->head = 0;
   ring->tail = 0;
   ring->count = 0;
}
//------------------------------------------------------------------
static inline int ring_buffer_empty (wifi_ring_t *ring) {
   return ring->count == 0;
}
//------------------------------------------------------------------
static void insert_frame (wifi_ring_t *ring, const u8 *data, const u16 len, const int ssi) {
   memcpy(ring->frames[ring->head].info, data, len);
   ring->frames[ring->head].len = len;
   ring->frames[ring->head].ssi = ssi;
   ring->head = (ring->head + 1) % RX_QUEUE_SIZE;
   if (ring->count < RX_QUEUE_SIZE) {
      ring->count++;
   } else {
      ring->tail = (ring->tail + 1) % RX_QUEUE_SIZE;
   }
}
//------------------------------------------------------------------
static void extract_frame (wifi_ring_t *ring, wifi_frame_t *frame) {
   frame->len = 0;
   if (ring->count > 0) {
      frame->len = ring->frames[ring->tail].len;
      memcpy(frame->info, ring->frames[ring->tail].info, frame->len);
      frame->ssi = ring->frames[ring->tail].ssi;
      ring->tail = (ring->tail + 1) % RX_QUEUE_SIZE;
      ring->count--;
   }
}
// --------------------------------------------
//  9) 802.11
// --------------------------------------------
#define ACK_SIZE		14
#define IEEE80211_HEADER	24
#define PLCP			48
#define BEACON			100
#define PREAMBLE		144
#define SHORT_PREAMBLE		72
#define SLOT_TIME		20
#define SHORT_SLOT_TIME		9
#define SIFS			10
#define PIFS			( SIFS + SLOT_TIME )
#define SHORT_PIFS		( SIFS + SHORT_SLOT_TIME )
#define DIFS			( SIFS + (2 * SLOT_TIME) )
#define SHORT_DIFS		( SIFS + (2 * SHORT_SLOT_TIME) )
#define EIFS			( SIFS + (8 * (IEEE80211_HEADER + ACK_SIZE)) )
//------------------------------------------------------------------
// Duration calculations
// The rate variable passed is: 100kbs.
// To convert from bytes to bits we multiply size with 8,
// then the size is multiplied with 10 to make the
// real rate -> rate argument correction.
//------------------------------------------------------------------
static inline u16 get_duration(const unsigned int size, const u8 rate)
{
   return ((size * 8 * 10) / rate);
}
//------------------------------------------------------------------
static inline u16 get_duration_res(const unsigned int size, const u8 rate)
{
   return ((size * 8 * 10) % rate);
}
// 802.11 Channel information structure.
struct ieee80211_channel {
   short chan; /* channel number (IEEE 802.11) */
   short freq; /* frequency in MHz */
   int val; /* hw specific value for the channel */
   int flag; /* flag for hostapd use (IEEE80211_CHAN_*) */
   unsigned char power_level;
   unsigned char antenna_max;
};
//------------------------------------------------------------------
struct ieee80211_hw_modes {
   int mode;
   int num_channels;
   struct ieee80211_channel *channels;
   int num_rates;
   struct ieee80211_rate *rates;
};
// 802.11g is backwards-compatible with 802.11b, so a wlan card can
// actually be both in 11b and 11g modes at the same time. */
enum {
   MODE_IEEE80211A = 0 /* IEEE 802.11a */,
   MODE_IEEE80211B = 1 /* IEEE 802.11b only */,
   MODE_ATHEROS_TURBO = 2 /* Atheros Turbo mode (2x.11a at 5 GHz) */,
   MODE_IEEE80211G = 3 /* IEEE 802.11g (and 802.11b compatibility) */,
   MODE_ATHEROS_TURBOG = 4 /* Atheros Turbo mode (2x.11g at 2.4 GHz) */,
   MODE_ATHEROS_PRIME = 5 /* Atheros Dynamic Turbo mode */,
   MODE_ATHEROS_PRIMEG = 6 /* Atheros Dynamic Turbo mode G */,
   MODE_ATHEROS_XR = 7 /* Atheros XR mode  */,
   NUM_IEEE80211_MODES = 8
};
// Configuration block used by the low-level driver to tell about supported hardware features
struct ieee80211_hw {
   int version; /* IEEE80211_VERSION */
   char *name;  /* Driver name */
   int num_modes;
   struct ieee80211_hw_modes *modes;
};
// Receive status.
struct ieee80211_rx_status {
   int freq; /* receive frequency in Mhz */
   int channel;
   int phymode;
   int ssi;
	int noise;
   int antenna;
   int rate;
   int flag;
};
//------------------------------------------------------------------
struct ieee80211_hdr {
   __le16 frame_control;
   __le16 duration_id;
   u8 addr1[6];
   u8 addr2[6];
   u8 addr3[6];
   __le16 seq_ctrl;
   u8 addr4[6];
} __attribute__ ((packed));
// --------------------------------------------
//  10) RATE
// --------------------------------------------
struct ieee80211_rate {
   int rate; /* rate in 100 kbps */
   int val; /* hw specific value for the rate */
   int flags; /* IEEE80211_RATE_ flags */
   int val2; /* hw specific value for the rate when using short preamble
   * (only when IEEE80211_RATE_PREAMBLE2 flag is set, i.e., for
             * 2, 5.5, and 11 Mbps) */
   signed char min_rssi_ack;
   unsigned char min_rssi_ack_delta;
};
//  Low-level driver should set PREAMBLE2, OFDM, CCK, and TURBO flags.
//  BASIC, SUPPORTED, ERP, and MANDATORY flags are set in 80211.o based on the
//  configuration.
#define IEEE80211_RATE_ERP 0x00000001
#define IEEE80211_RATE_BASIC 0x00000002
#define IEEE80211_RATE_PREAMBLE2 0x00000004
#define IEEE80211_RATE_SUPPORTED 0x00000010
#define IEEE80211_RATE_OFDM 0x00000020
#define IEEE80211_RATE_CCK 0x00000040
#define IEEE80211_RATE_TURBO 0x00000080
#define IEEE80211_RATE_MANDATORY 0x00000100
#define IEEE80211_RATE_XR 0x00000200
#define IEEE80211_RATE_CCK_2 (IEEE80211_RATE_CCK | IEEE80211_RATE_PREAMBLE2)
#define IEEE80211_RATE_MODULATION(f) \
(f & (IEEE80211_RATE_CCK | IEEE80211_RATE_OFDM))
//------------------------------------------------------------------
// Device specific rate value.
// We will have to create the device specific rate value.
// We need to make it a consist of multiple fields because we want
// to store more then 1 device specific values inside the value.
//	1 - rate, stored as 100 kbit/s.
//	2 - preamble, short_preamble enabled flag.
//	3 - MASK_RATE, which rates are enabled in this mode, this mask
//	corresponds with the TX register format for the current device.
//	4 - plcp, 802.11b rates are device specific,
//	802.11g rates are set according to the ieee802.11a-1999 p.14.
// The bit to enable preamble is set in a seperate define.
//------------------------------------------------------------------
#define DEV_RATE	FIELD32(0x000007ff)
#define DEV_PREAMBLE	FIELD32(0x00000800)
#define DEV_RATEMASK	FIELD32(0x00fff000)
#define DEV_PLCP	FIELD32(0xff000000)
// Bitmask for MASK_RATE
#define DEV_RATE_1MB	0x00000001
#define DEV_RATE_2MB	0x00000002
#define DEV_RATE_5_5MB	0x00000004
#define DEV_RATE_11MB	0x00000008
#define DEV_RATE_6MB	0x00000010
#define DEV_RATE_9MB	0x00000020
#define DEV_RATE_12MB	0x00000040
#define DEV_RATE_18MB	0x00000080
#define DEV_RATE_24MB	0x00000100
#define DEV_RATE_36MB	0x00000200
#define DEV_RATE_48MB	0x00000400
#define DEV_RATE_54MB	0x00000800
// Bitmask groups of bitrates
#define DEV_BASIC_RATE \
	( DEV_RATE_1MB | DEV_RATE_2MB | DEV_RATE_5_5MB | DEV_RATE_11MB | \
	  DEV_RATE_6MB | DEV_RATE_12MB | DEV_RATE_24MB )

#define DEV_CCK_RATE \
	( DEV_RATE_1MB | DEV_RATE_2MB | DEV_RATE_5_5MB | DEV_RATE_11MB )

#define DEV_OFDM_RATE \
	( DEV_RATE_6MB | DEV_RATE_9MB | DEV_RATE_12MB | DEV_RATE_18MB | \
	  DEV_RATE_24MB | DEV_RATE_36MB | DEV_RATE_48MB | DEV_RATE_54MB )

// Macro's to set and get specific fields from the device specific val and val2
// fields inside the ieee80211_rate entry.
#define DEVICE_SET_RATE_FIELD(__value, __mask) \
	(int)( ((__value) << DEV_##__mask.bit_offset) & DEV_##__mask.bit_mask )

#define DEVICE_GET_RATE_FIELD(__value, __mask) \
	(int)( ((__value) & DEV_##__mask.bit_mask) >> DEV_##__mask.bit_offset )

// Initialize a ieee80211_entry by filling in all fields and correctly
// construct the device specific val and val2 fields.
static inline void device_rate_entry(struct ieee80211_rate *entry,
                                     int rate, int mask, int plcp, int flags)
{
   entry->rate = rate;
   entry->val = DEVICE_SET_RATE_FIELD(rate, RATE) |
         DEVICE_SET_RATE_FIELD(mask, RATEMASK) |
         DEVICE_SET_RATE_FIELD(plcp, PLCP);
   entry->flags = flags;
   entry->val2 = entry->val |
         DEVICE_SET_RATE_FIELD(entry->flags & IEEE80211_RATE_PREAMBLE2,
                               PREAMBLE);
   entry->min_rssi_ack = 0;
   entry->min_rssi_ack_delta = 0;
}
//------------------------------------------------------------------
static inline int device_signal_to_rate(struct ieee80211_hw_modes *mode,
                                        u8 signal, u8 ofdm)
{
   unsigned int i;
   u8 plcp;
   u8 rate;

   for (i = 0; i < mode->num_rates; i++) {
      // When frame was received with an OFDM bitrate,
      // the signal is the PLCP value. If it was received with
      // a CCK bitrate the signal is the rate in 0.5kbit/s.
      if (!ofdm) {
         rate = DEVICE_GET_RATE_FIELD(mode->rates[i].val, RATE);
         if (rate == signal)
            return mode->rates[i].val;
      } else {
         plcp = DEVICE_GET_RATE_FIELD(mode->rates[i].val, PLCP);
         if (plcp == signal) {
            // Check for preamble bit.
            if (signal & 0x08)
               return mode->rates[i].val2;
            return mode->rates[i].val;
         }
      }
   }

   return 0;
}
// --------------------------------------------
//  11) TX POWER
// --------------------------------------------
// Macro's for converting txpower from EEPROM to dscape value
// and from dscape value to register value.
//------------------------------------------------------------------
#define TXPOWER_FROM_DEV(__txpower) \
	({ \
		((__txpower) > MAX_TXPOWER) ? DEFAULT_TXPOWER : (__txpower); \
})

#define TXPOWER_TO_DEV(__txpower) \
	({ \
		((__txpower) <= MIN_TXPOWER) ? MIN_TXPOWER : \
		(((__txpower) >= MAX_TXPOWER) ? MAX_TXPOWER : \
		(__txpower)); \
})
// --------------------------------------------
//  12) rt2x00dev structure
// --------------------------------------------
struct rt2x00_dev {
   void *dev;
#define rt2x00dev_pci(__dev)	( (struct pci_device*)(__dev)->dev )
   void __iomem *csr_addr;
   u8 eeprom_width;
   struct rt2x00_chip chip;
   u8 freq_offset;
   u16 led_reg;
   u8 led_mode;
   u16 *eeprom;
   unsigned int flags;
#define SET_FLAG(__dev, __flag)		( (__dev)->flags |= (__flag) )
#define GET_FLAG(__dev, __flag)		( !!((__dev)->flags & (__flag)) )
#define CLEAR_FLAG(__dev, __flag)	( (__dev)->flags &= ~(__flag) )
#define CLEAR_FLAGS(__dev)		( (__dev)->flags = 0 )
#define DEVICE_ENABLED_RADIO		0x00000001
#define DEVICE_ENABLED_RADIO_HW		0x00000002
#define DEVICE_INITIALIZED		0x00000004
#define DEVICE_INITIALIZED_HW		0x00000008
#define DEVICE_INITIALIZED_MAC		0x00000010
#define FIRMWARE_LOADED			0x00000020
#define FIRMWARE_FAILED			0x00000040
#define INTERFACE_INITIALIZED		0x00000080
#define INTERFACE_INITIALIZED_MONITOR	0x00000100
#define INTERFACE_ENABLED		0x00000200
#define INTERFACE_ENABLED_MONITOR	0x00000400
#define INTERFACE_ENABLED_PROMISC	0x00000800
#define DEVICE_SUPPORT_ATIM		0x00001000
#define DEVICE_SUPPORT_HW_BUTTON	0x00002000
#define CONFIG_FRAME_TYPE		0x00004000
#define CONFIG_RF_SEQUENCE		0x00008000
#define CONFIG_EXTERNAL_LNA		0x00010000
#define CONFIG_EXTERNAL_LNA_A		0x00020000
#define CONFIG_EXTERNAL_LNA_BG		0x00040000
#define CONFIG_DOUBLE_ANTENNA		0x00080000
#define CONFIG_DISABLE_BBP_TUNING	0x00100000
	// Data rings for both RX and TX.
	// The first entries must be the normal TX
	// rings, followed by a possible ATIM ring
	// (when atim is used atim_available must be set)
	// after that the beacon and RX ring follow.
	struct data_ring *ring;
	// IEEE80211 Configuration block.
	struct ieee80211_hw hw;
       // Active RF register values.
       // These are stored here for easier working
       // with the rf registers.
        u32 rf1;
        u32 rf2;
        u32 rf3;
        u32 rf4;
       // Current TX power value.
        u16 tx_power;
        // RX configuration information.
        struct ieee80211_rx_status rx_params;
};
//------------------------------------------------------------------
static inline struct data_ring* rt2x00_get_ring(
      struct rt2x00_dev *rt2x00dev, const int ring)
{
   return &rt2x00dev->ring[ring];
}
// --------------------------------------------
//  13) Other constants
// --------------------------------------------
#define RT2561_VENDOR   0x1814
#define RT2561_DEVICE   0x0302
#define PCI_CONFIG_HEADER_VENDOR	0x0000
#define PCI_CONFIG_HEADER_DEVICE	0x0002
#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
#define REGISTER_BUSY_COUNT	5
#define REGISTER_BUSY_DELAY	100
#define EEPROM_WIDTH_93C46	6
#define EEPROM_WIDTH_93C66	8
#define EEPROM_READ_OPCODE	0x06
enum led_mode {
   LED_MODE_DEFAULT = 0,
   LED_MODE_TXRX_ACTIVITY = 1,
   LED_MODE_SIGNAL_STRENGTH = 2,
   LED_MODE_ASUS = 3,
   LED_MODE_ALPHA = 4,
};
#define IEEE80211_CHAN_W_SCAN 0x00000001
#define IEEE80211_CHAN_W_ACTIVE_SCAN 0x00000002
#define IEEE80211_CHAN_W_IBSS 0x00000004
#define PCI_CFG_CSR			0x3460
enum ieee80211_if_types {
   IEEE80211_IF_TYPE_AP = 0x00000000, // interface in AP mode.
   IEEE80211_IF_TYPE_MGMT = 0x00000001, // special interface for communication with hostap
   IEEE80211_IF_TYPE_STA = 0x00000002, // interface in STA (client) mode.
   IEEE80211_IF_TYPE_IBSS = 0x00000003, // interface in IBSS (ad-hoc) mode.
   IEEE80211_IF_TYPE_MNTR = 0x00000004, // interface in monitor (rfmon) mode.
   IEEE80211_IF_TYPE_WDS = 0x5A580211, // interface in WDS mode.
   IEEE80211_IF_TYPE_VLAN = 0x00080211, // not used.
};
// Cipher types for hardware encryption
enum cipher {
   CIPHER_NONE = 0,
   CIPHER_WEP64 = 1,
   CIPHER_WEP128 = 2,
   CIPHER_TKIP = 3,
   CIPHER_AES = 4,
};
// HOST_CMD_CSR: For HOST to interrupt embedded processor
#define HOST_CMD_CSR			0x0008
#define HOST_CMD_CSR_HOST_COMMAND	FIELD32(0x0000007f)
#define HOST_CMD_CSR_INTERRUPT_MCU	FIELD32(0x00000080)
// --------------------------------------------
//  14) FIRMWARE IMAGE
// --------------------------------------------
static u8 RT2561S_FirmwareImage[] = {
   0x02, 0x1c, 0x2d, 0x02, 0x07, 0xdf, 0xc2, 0x8c, 0x22, 0x22, 0x00, 0x02, 0x19, 0x43, 0xc2, 0xaf,
   0xc2, 0x8d, 0x75, 0x8c, 0x94, 0x75, 0x8a, 0x93, 0xd2, 0xaf, 0x22, 0x02, 0x1a, 0x9c, 0x12, 0x08,
   0xdf, 0x40, 0x03, 0x02, 0x02, 0x1e, 0x90, 0x21, 0x02, 0xe0, 0xf5, 0x2d, 0x90, 0x00, 0x03, 0xe0,
   0x12, 0x04, 0x3f, 0x00, 0xb0, 0x00, 0x00, 0xce, 0x01, 0x00, 0x5e, 0x10, 0x00, 0x6f, 0x11, 0x00,
   0xf2, 0x20, 0x01, 0x4d, 0x21, 0x01, 0x70, 0x22, 0x01, 0x84, 0x30, 0x01, 0x8f, 0x31, 0x01, 0xd5,
   0x50, 0x01, 0x9f, 0x51, 0x01, 0xf2, 0x52, 0x02, 0x06, 0x60, 0x00, 0x00, 0x02, 0x14, 0x90, 0x00,
   0x0a, 0xe0, 0x20, 0xe5, 0x03, 0x30, 0x07, 0x03, 0xd2, 0x08, 0x22, 0x12, 0x14, 0x2b, 0x22, 0x90,
   0x21, 0x00, 0xe0, 0xf5, 0x11, 0xe5, 0x11, 0xc4, 0x33, 0x54, 0xe0, 0x24, 0x21, 0xf5, 0x82, 0xe4,
   0x34, 0x21, 0xf5, 0x83, 0xe0, 0x44, 0x80, 0xf0, 0xe5, 0x11, 0xc4, 0x33, 0x54, 0xe0, 0x24, 0x2c,
   0xf5, 0x82, 0xe4, 0x34, 0x21, 0xf5, 0x83, 0xe5, 0x11, 0xf0, 0xc4, 0x33, 0x54, 0xe0, 0x24, 0x2d,
   0xf5, 0x82, 0xe4, 0x34, 0x21, 0xf5, 0x83, 0xe5, 0x2d, 0xf0, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0x22,
   0x12, 0x05, 0xcb, 0x90, 0x21, 0x00, 0xe0, 0xf5, 0x31, 0x60, 0x05, 0x12, 0x1b, 0xe0, 0x80, 0x03,
   0x12, 0x1b, 0xa6, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22, 0x75, 0x31,
   0xff, 0x90, 0x01, 0x00, 0xe0, 0x54, 0xf7, 0xf0, 0x90, 0x01, 0x01, 0xe0, 0x54, 0xfe, 0xf0, 0x54,
   0x3e, 0xf0, 0xe4, 0x90, 0x00, 0x0b, 0xf0, 0xf0, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10,
   0xe8, 0x22, 0x7e, 0x2b, 0x7f, 0x80, 0x7d, 0x03, 0x12, 0x0a, 0xfb, 0x90, 0x34, 0xcd, 0xe0, 0x20,
   0xe3, 0xf9, 0x90, 0x21, 0x14, 0x12, 0x04, 0x1b, 0x90, 0x34, 0xc0, 0x12, 0x04, 0x27, 0x90, 0x21,
   0x18, 0x12, 0x04, 0x1b, 0x90, 0x34, 0xc8, 0x12, 0x04, 0x27, 0x90, 0x21, 0x1c, 0x12, 0x04, 0x1b,
   0x90, 0x34, 0xc4, 0x12, 0x04, 0x27, 0x90, 0x34, 0xcc, 0x74, 0x01, 0xf0, 0xa3, 0xe0, 0x44, 0x04,
   0xf0, 0x90, 0x01, 0x01, 0xe0, 0x44, 0x01, 0xf0, 0x44, 0x40, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x44,
   0x10, 0xf0, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22, 0x90, 0x01, 0x00,
   0xe0, 0x54, 0xf7, 0xf0, 0x90, 0x01, 0x01, 0xe0, 0x54, 0xfe, 0xf0, 0x54, 0xbf, 0xf0, 0x90, 0x00,
   0x0b, 0xe0, 0x54, 0xef, 0xf0, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22,
   0x7e, 0x2b, 0x7f, 0x80, 0x7d, 0x03, 0x12, 0x0a, 0xfb, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d,
   0x12, 0x10, 0xe8, 0x22, 0xd2, 0x05, 0x85, 0x2d, 0x23, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0x22, 0x12,
   0x13, 0xae, 0xc2, 0x00, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22, 0x85,
   0x2d, 0x25, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xfb, 0xff, 0xf0, 0xe4, 0x90, 0x00, 0x07, 0xf0, 0x90,
   0x00, 0x0a, 0x74, 0x04, 0xf0, 0xe4, 0x90, 0x00, 0x08, 0xf0, 0x90, 0x21, 0x00, 0xe0, 0x90, 0x00,
   0x09, 0xf0, 0x90, 0x00, 0x07, 0x74, 0x71, 0xf0, 0xef, 0x44, 0x04, 0x90, 0x00, 0x0b, 0xf0, 0xe4,
   0x90, 0x21, 0x03, 0xf0, 0x22, 0x90, 0x21, 0x00, 0xe0, 0xff, 0x54, 0x1f, 0xf5, 0x30, 0xa3, 0xe0,
   0xf5, 0x27, 0x8f, 0x26, 0x12, 0x14, 0x62, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10,
   0xe8, 0x22, 0x90, 0x21, 0x00, 0xe0, 0xf5, 0x2c, 0x12, 0x17, 0xa3, 0xe4, 0x90, 0x21, 0x03, 0xf0,
   0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22, 0x12, 0x1a, 0xed, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d,
   0x12, 0x10, 0xe8, 0x22, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10, 0xe8, 0x22, 0xe5,
   0x31, 0x64, 0x01, 0x70, 0x41, 0x12, 0x08, 0xed, 0x40, 0x03, 0x02, 0x03, 0x9d, 0x12, 0x0e, 0x34,
   0x50, 0x20, 0x7e, 0x2b, 0x7f, 0x80, 0x7d, 0x03, 0x12, 0x0a, 0xfb, 0x7f, 0x01, 0x12, 0x0a, 0xd8,
   0x40, 0x09, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x22, 0x12, 0x09, 0x64, 0x75, 0x2f,
   0x01, 0x22, 0x7f, 0x01, 0x12, 0x0a, 0xd8, 0x50, 0x04, 0x75, 0x2f, 0x02, 0x22, 0xd2, 0x09, 0x12,
   0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x22, 0x12, 0x08, 0x90, 0x50, 0x51, 0x12, 0x0a, 0xac, 0x90, 0x30,
   0xf4, 0xe0, 0xf5, 0x2a, 0x7e, 0x30, 0x7f, 0xec, 0xa3, 0xe0, 0xfd, 0xe4, 0xfb, 0x12, 0x0d, 0xa0,
   0xe4, 0xff, 0xfe, 0x12, 0x0e, 0x29, 0x90, 0x00, 0x0a, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0b, 0xe0,
   0x44, 0x02, 0xff, 0xf0, 0xfd, 0x90, 0x01, 0x05, 0x74, 0x20, 0xf0, 0x90, 0x01, 0x06, 0xe0, 0x44,
   0x20, 0xf0, 0xed, 0x54, 0xbf, 0x90, 0x00, 0x0b, 0xf0, 0x90, 0x34, 0xcc, 0xe0, 0x44, 0x01, 0xf0,
   0xa3, 0xe0, 0x44, 0x01, 0xf0, 0xa3, 0xe0, 0x44, 0x01, 0xf0, 0xd2, 0x04, 0x12, 0x08, 0xad, 0x50,
   0x43, 0x12, 0x0a, 0xbb, 0x7e, 0x30, 0x7f, 0xe0, 0x7c, 0x30, 0x7d, 0xec, 0x75, 0x1b, 0x11, 0x7b,
   0x06, 0x12, 0x13, 0xc8, 0x90, 0x30, 0xf5, 0xe0, 0x75, 0xf0, 0x20, 0xa4, 0xff, 0xae, 0xf0, 0x12,
   0x0e, 0x29, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xfd, 0xff, 0xf0, 0xfd, 0xe4, 0x90, 0x00, 0x04, 0xf0,
   0x90, 0x01, 0x06, 0xe0, 0x54, 0xdf, 0xf0, 0x90, 0x00, 0x0a, 0x74, 0x40, 0xf0, 0x4d, 0x90, 0x00,
   0x0b, 0xf0, 0xc2, 0x04, 0x12, 0x09, 0x25, 0x50, 0x38, 0x12, 0x0a, 0xbb, 0x7e, 0x30, 0x7f, 0xe0,
   0x7c, 0x1c, 0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0x90, 0x00, 0x04, 0x74,
   0x02, 0xf0, 0x90, 0x00, 0x0a, 0xf0, 0xe4, 0xff, 0xfe, 0x12, 0x0e, 0x29, 0x90, 0x00, 0x0b, 0xe0,
   0x54, 0xfd, 0xf0, 0xe4, 0x90, 0x00, 0x04, 0xf0, 0x90, 0x01, 0x06, 0xe0, 0x54, 0xdf, 0xf0, 0xc2,
   0x04, 0x12, 0x09, 0x4f, 0x50, 0x25, 0x12, 0x0a, 0xbb, 0x7f, 0x02, 0x12, 0x0a, 0xd8, 0x90, 0x01,
   0x04, 0xe0, 0x54, 0x7f, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xfd, 0xff, 0xf0, 0xe4, 0x90, 0x00,
   0x04, 0xf0, 0xef, 0x54, 0xbf, 0x90, 0x00, 0x0b, 0xf0, 0xc2, 0x04, 0x12, 0x08, 0xed, 0x50, 0x2d,
   0x12, 0x0a, 0xbb, 0x7e, 0x30, 0x7f, 0xe0, 0x7c, 0x1c, 0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06,
   0x12, 0x13, 0xc8, 0x90, 0x00, 0x04, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0a, 0xf0, 0x90, 0x01, 0x06,
   0xe0, 0x54, 0xdf, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xbf, 0xf0, 0xc2, 0x04, 0x22, 0xef, 0x8d,
   0xf0, 0xa4, 0xa8, 0xf0, 0xcf, 0x8c, 0xf0, 0xa4, 0x28, 0xce, 0x8d, 0xf0, 0xa4, 0x2e, 0xfe, 0x22,
   0xbc, 0x00, 0x0b, 0xbe, 0x00, 0x29, 0xef, 0x8d, 0xf0, 0x84, 0xff, 0xad, 0xf0, 0x22, 0xe4, 0xcc,
   0xf8, 0x75, 0xf0, 0x08, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xec, 0x33, 0xfc, 0xee, 0x9d, 0xec,
   0x98, 0x40, 0x05, 0xfc, 0xee, 0x9d, 0xfe, 0x0f, 0xd5, 0xf0, 0xe9, 0xe4, 0xce, 0xfd, 0x22, 0xed,
   0xf8, 0xf5, 0xf0, 0xee, 0x84, 0x20, 0xd2, 0x1c, 0xfe, 0xad, 0xf0, 0x75, 0xf0, 0x08, 0xef, 0x2f,
   0xff, 0xed, 0x33, 0xfd, 0x40, 0x07, 0x98, 0x50, 0x06, 0xd5, 0xf0, 0xf2, 0x22, 0xc3, 0x98, 0xfd,
   0x0f, 0xd5, 0xf0, 0xea, 0x22, 0xc5, 0xf0, 0xf8, 0xa3, 0xe0, 0x28, 0xf0, 0xc5, 0xf0, 0xf8, 0xe5,
   0x82, 0x15, 0x82, 0x70, 0x02, 0x15, 0x83, 0xe0, 0x38, 0xf0, 0x22, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd,
   0xa3, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x22, 0xec, 0xf0, 0xa3, 0xed, 0xf0, 0xa3, 0xee, 0xf0, 0xa3,
   0xef, 0xf0, 0x22, 0xa4, 0x25, 0x82, 0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83, 0xf5, 0x83, 0x22, 0xd0,
   0x83, 0xd0, 0x82, 0xf8, 0xe4, 0x93, 0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0d, 0xa3, 0xa3, 0x93,
   0xf8, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x88, 0x83, 0xe4, 0x73, 0x74, 0x02, 0x93, 0x68, 0x60, 0xef,
   0xa3, 0xa3, 0xa3, 0x80, 0xdf, 0x8a, 0x83, 0x89, 0x82, 0xe4, 0x73, 0xe5, 0x2e, 0x14, 0x60, 0x1d,
   0x14, 0x60, 0x3d, 0x14, 0x60, 0x5d, 0x14, 0x70, 0x03, 0x02, 0x05, 0x18, 0x24, 0x04, 0x60, 0x03,
   0x02, 0x05, 0x2e, 0x20, 0x0d, 0x03, 0x02, 0x05, 0x2e, 0x75, 0x2e, 0x01, 0x22, 0x90, 0x00, 0x0a,
   0xe0, 0xff, 0x30, 0xe5, 0x03, 0x44, 0x20, 0xf0, 0xe5, 0x40, 0x45, 0x3f, 0x60, 0x03, 0x02, 0x05,
   0x2e, 0x75, 0x2e, 0x02, 0x12, 0x1b, 0x12, 0x12, 0x1b, 0xce, 0xaf, 0x28, 0x12, 0x1b, 0x8f, 0x22,
   0x90, 0x01, 0x03, 0xe0, 0xff, 0x30, 0xe7, 0x76, 0xef, 0x44, 0x80, 0x90, 0x01, 0x03, 0xf0, 0x12,
   0x08, 0x55, 0x12, 0x1b, 0x55, 0x12, 0x1c, 0x01, 0x75, 0x2e, 0x03, 0xaf, 0x22, 0x7e, 0x00, 0x12,
   0x1c, 0x45, 0x22, 0xe5, 0x40, 0x45, 0x3f, 0x70, 0x21, 0x12, 0x17, 0xd8, 0x12, 0x1b, 0xce, 0x12,
   0x1b, 0x35, 0x12, 0x1c, 0x01, 0x12, 0x1c, 0x1f, 0x30, 0x0d, 0x0b, 0x75, 0x2e, 0x01, 0xaf, 0x32,
   0x7e, 0x00, 0x12, 0x1c, 0x45, 0x22, 0xe4, 0xf5, 0x2e, 0x22, 0x90, 0x00, 0x0a, 0xe0, 0xff, 0x30,
   0xe5, 0x2c, 0x44, 0x20, 0xf0, 0x12, 0x17, 0xd8, 0x12, 0x1b, 0xce, 0x12, 0x1b, 0x35, 0x12, 0x1c,
   0x01, 0x12, 0x1c, 0x1f, 0x75, 0x2e, 0x04, 0x22, 0xe5, 0x40, 0x45, 0x3f, 0x70, 0x10, 0x30, 0x0d,
   0x0a, 0x75, 0x2e, 0x01, 0xaf, 0x32, 0xfe, 0x12, 0x1c, 0x45, 0x22, 0xe4, 0xf5, 0x2e, 0x22, 0x12,
   0x09, 0x25, 0x40, 0x05, 0x12, 0x08, 0xed, 0x50, 0x44, 0x7e, 0x30, 0x7f, 0xe0, 0x7c, 0x1c, 0x7d,
   0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0x90, 0x00, 0x04, 0x74, 0x02, 0xf0, 0x90,
   0x00, 0x0a, 0xf0, 0xe4, 0xff, 0xfe, 0x12, 0x0e, 0x29, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xbf, 0xf0,
   0x54, 0x7f, 0xff, 0xf0, 0xe4, 0x90, 0x30, 0xe9, 0xf0, 0xef, 0x54, 0xfd, 0x90, 0x00, 0x0b, 0xf0,
   0xe4, 0x90, 0x00, 0x04, 0xf0, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x12, 0x09, 0x3a,
   0x50, 0x48, 0x7e, 0x30, 0x7f, 0xe0, 0x7c, 0x1c, 0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12,
   0x13, 0xc8, 0x90, 0x00, 0x04, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0a, 0xf0, 0xe4, 0xff, 0xfe, 0x12,
   0x0e, 0x29, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xbf, 0xf0, 0x54, 0xfd, 0xf0, 0xe4, 0x90, 0x00, 0x04,
   0xf0, 0xff, 0x12, 0x0a, 0xd8, 0x50, 0x04, 0x75, 0x2f, 0x07, 0x22, 0x90, 0x01, 0x04, 0xe0, 0x54,
   0x7f, 0xf0, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x22, 0xc2, 0xaf, 0xe4, 0xf5, 0x2f,
   0xf5, 0x88, 0x75, 0xa8, 0x0f, 0x75, 0x89, 0x11, 0xf5, 0xb8, 0xf5, 0xe8, 0x75, 0x90, 0x0f, 0x75,
   0x31, 0xff, 0x75, 0x2b, 0xff, 0x90, 0x22, 0x2e, 0xf0, 0xa3, 0xf0, 0x90, 0x22, 0x4e, 0xf0, 0xa3,
   0xf0, 0xc2, 0x05, 0xc2, 0x08, 0xc2, 0x00, 0xc2, 0x07, 0xc2, 0x04, 0x90, 0x00, 0x0a, 0x74, 0xff,
   0xf0, 0x90, 0x00, 0x0b, 0x74, 0x01, 0xf0, 0x90, 0x01, 0x03, 0x74, 0xff, 0xf0, 0xe4, 0x90, 0x01,
   0x04, 0xf0, 0x90, 0x01, 0x05, 0x74, 0xff, 0xf0, 0xe4, 0x90, 0x01, 0x06, 0xf0, 0x90, 0x00, 0x04,
   0xf0, 0x90, 0x30, 0xe8, 0x74, 0x10, 0xf0, 0x90, 0x01, 0x07, 0xf0, 0x90, 0x01, 0x08, 0x04, 0xf0,
   0x90, 0x01, 0x09, 0x74, 0x48, 0xf0, 0x90, 0x01, 0x0a, 0x74, 0x7f, 0xf0, 0x90, 0x01, 0x02, 0x74,
   0x1f, 0xf0, 0x90, 0x01, 0x00, 0x74, 0x14, 0xf0, 0x90, 0x01, 0x01, 0x74, 0x20, 0xf0, 0x90, 0x00,
   0x00, 0xe0, 0x44, 0x80, 0xf0, 0x75, 0x49, 0x00, 0x75, 0x4a, 0x01, 0xc2, 0x01, 0xd2, 0xaf, 0x22,
   0x12, 0x08, 0xed, 0x50, 0x2d, 0x12, 0x0a, 0x78, 0x90, 0x01, 0x06, 0xe0, 0x54, 0xdf, 0xf0, 0x7e,
   0x30, 0x7f, 0xe0, 0x7c, 0x1c, 0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0x90,
   0x00, 0x04, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0a, 0xf0, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5,
   0x2f, 0x22, 0x12, 0x09, 0x4f, 0x50, 0x50, 0x12, 0x0a, 0x78, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xfd,
   0xf0, 0xe4, 0x90, 0x00, 0x04, 0xf0, 0x90, 0x01, 0x03, 0x74, 0x80, 0xf0, 0x90, 0x01, 0x04, 0xe0,
   0x44, 0x80, 0xf0, 0x7f, 0x02, 0x12, 0x0a, 0xd8, 0x50, 0x04, 0x75, 0x2f, 0x05, 0x22, 0x7e, 0x30,
   0x7f, 0xe0, 0x7c, 0x1c, 0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0x90, 0x00,
   0x04, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0a, 0xf0, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0x90, 0x01, 0x04,
   0xe0, 0x54, 0x7f, 0xf0, 0xe4, 0xf5, 0x2f, 0x22, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x10, 0x12, 0x1c,
   0x5c, 0x50, 0x26, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53, 0x10, 0xfd, 0x80, 0x03, 0x43, 0x10, 0x02,
   0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x10, 0xf7, 0x80, 0x03, 0x43, 0x10, 0x08, 0x53, 0x10, 0xfe,
   0x43, 0x10, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x10, 0xf0, 0x12, 0x1c, 0x51, 0x50, 0x48, 0x90, 0x01,
   0x03, 0xe0, 0xf5, 0x10, 0x54, 0x1c, 0x60, 0x3e, 0xe5, 0x10, 0x54, 0xe3, 0xf0, 0xa3, 0xe0, 0xf5,
   0x10, 0xf0, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x43, 0x10, 0x02, 0x80, 0x03, 0x53, 0x10, 0xfd, 0xe5,
   0x27, 0x30, 0xe7, 0x05, 0x43, 0x10, 0x08, 0x80, 0x03, 0x53, 0x10, 0xf7, 0x53, 0x10, 0xfe, 0x43,
   0x10, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x10, 0xf0, 0xaf, 0x29, 0x7e, 0x00, 0x12, 0x1c, 0x70, 0xaf,
   0x35, 0x7e, 0x00, 0x12, 0x1c, 0x77, 0x22, 0x12, 0x08, 0xca, 0x50, 0x72, 0x12, 0x10, 0xcd, 0x85,
   0x34, 0x82, 0x85, 0x33, 0x83, 0xe0, 0xfc, 0xa3, 0xe0, 0xc3, 0x9f, 0xf5, 0x12, 0xec, 0x9e, 0xf5,
   0x11, 0xd3, 0xe5, 0x12, 0x94, 0x00, 0xe5, 0x11, 0x64, 0x80, 0x94, 0x80, 0x40, 0x06, 0xae, 0x11,
   0xaf, 0x12, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00, 0x8e, 0x11, 0x8f, 0x12, 0xe5, 0x34, 0x24, 0x10,
   0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xc3, 0x95, 0x12, 0xf5, 0x12, 0xe4, 0x95, 0x11,
   0xf5, 0x11, 0xc3, 0x64, 0x80, 0x94, 0x80, 0x50, 0x05, 0xe4, 0xf5, 0x11, 0xf5, 0x12, 0xe5, 0x34,
   0x24, 0x12, 0xff, 0xe4, 0x35, 0x33, 0xfe, 0xad, 0x12, 0x7b, 0x01, 0x12, 0x0d, 0xa0, 0x90, 0x01,
   0x05, 0x74, 0x20, 0xf0, 0x90, 0x01, 0x06, 0xe0, 0x44, 0x20, 0xf0, 0x75, 0x2f, 0x03, 0x22, 0xc0,
   0xe0, 0xc0, 0xf0, 0xc0, 0x83, 0xc0, 0x82, 0xc0, 0xd0, 0x75, 0xd0, 0x08, 0xc2, 0xaf, 0x90, 0x22,
   0x2e, 0xe0, 0xfe, 0xa3, 0xe0, 0x8e, 0x33, 0xf5, 0x34, 0xe5, 0x2f, 0x25, 0xe0, 0x24, 0xf1, 0xf5,
   0x82, 0xe4, 0x34, 0x1b, 0xf5, 0x83, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93, 0xca, 0xee, 0xca, 0xf9,
   0x12, 0x04, 0x65, 0x12, 0x09, 0x17, 0x50, 0x02, 0xd2, 0x07, 0x12, 0x19, 0x8e, 0x12, 0x00, 0x1e,
   0x12, 0x09, 0x02, 0x50, 0x05, 0xaf, 0x25, 0x12, 0x10, 0xe8, 0x30, 0x05, 0x1b, 0xe5, 0x2f, 0x70,
   0x17, 0x20, 0x04, 0x14, 0x12, 0x13, 0x28, 0x92, 0x00, 0xc2, 0x05, 0xd2, 0x0b, 0xa2, 0x00, 0xe4,
   0x33, 0xf5, 0x14, 0xaf, 0x23, 0x12, 0x10, 0xf1, 0xd2, 0xaf, 0xd0, 0xd0, 0xd0, 0x82, 0xd0, 0x83,
   0xd0, 0xf0, 0xd0, 0xe0, 0x32, 0xe4, 0xff, 0x90, 0x30, 0x8c, 0xe4, 0xf0, 0xef, 0x90, 0x1b, 0xba,
   0x93, 0x44, 0x80, 0x90, 0x30, 0x8d, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0, 0x90, 0x30,
   0x8c, 0xe0, 0xfe, 0x74, 0x36, 0x2f, 0xf8, 0xc6, 0xee, 0xc6, 0xa3, 0xe0, 0xfe, 0xef, 0x90, 0x1b,
   0xba, 0x93, 0x44, 0x80, 0x6e, 0x60, 0x01, 0x1f, 0x0f, 0xef, 0xc3, 0x94, 0x09, 0x40, 0xc8, 0x22,
   0x90, 0x30, 0xf0, 0xe0, 0xf5, 0x2a, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe4, 0x0e, 0x90, 0x30, 0xf2,
   0xe0, 0x60, 0x08, 0x90, 0x00, 0x0a, 0x74, 0x10, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x30, 0xf0,
   0xe0, 0xf5, 0x2a, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe4, 0x0e, 0x90, 0x30, 0xf2, 0xe0, 0x70, 0x08,
   0x90, 0x00, 0x0a, 0x74, 0x10, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x01, 0x03, 0xe0, 0x30, 0xe7,
   0x0c, 0x74, 0x80, 0xf0, 0x90, 0x01, 0x04, 0xe0, 0x54, 0x7f, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90,
   0x00, 0x0a, 0xe0, 0x30, 0xe0, 0x05, 0x74, 0x01, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x00, 0x0a,
   0xe0, 0x30, 0xe1, 0x0c, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0xfd, 0xf0, 0xd3, 0x22,
   0xc3, 0x22, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe2, 0x0c, 0x74, 0x04, 0xf0, 0x90, 0x00, 0x0b, 0xe0,
   0x54, 0xfb, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe5, 0x05, 0x74, 0x20,
   0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe6, 0x0c, 0x74, 0x40, 0xf0, 0x90,
   0x00, 0x0b, 0xe0, 0x54, 0xbf, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x00, 0x0a, 0xe0, 0x30, 0xe7,
   0x0c, 0x74, 0x80, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x54, 0x7f, 0xf0, 0xd3, 0x22, 0xc3, 0x22, 0x90,
   0x01, 0x05, 0xe0, 0x30, 0xe5, 0x0c, 0x74, 0x20, 0xf0, 0x90, 0x01, 0x06, 0xe0, 0x54, 0xdf, 0xf0,
   0xd3, 0x22, 0xc3, 0x22, 0x90, 0x34, 0xcd, 0xe0, 0xf9, 0x20, 0xe3, 0xf8, 0xe5, 0x2b, 0xf4, 0x60,
   0x66, 0x90, 0x34, 0xc0, 0x12, 0x04, 0x1b, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0x75, 0xf0, 0x20,
   0xe5, 0x2b, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24, 0x04, 0xf5, 0x82, 0xe4, 0x35, 0x83, 0xf5, 0x83,
   0x12, 0x04, 0x27, 0x90, 0x34, 0xc8, 0x12, 0x04, 0x1b, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0x75,
   0xf0, 0x20, 0xe5, 0x2b, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24, 0x08, 0xf5, 0x82, 0xe4, 0x35, 0x83,
   0xf5, 0x83, 0x12, 0x04, 0x27, 0x90, 0x34, 0xd0, 0x12, 0x04, 0x1b, 0x85, 0x34, 0x82, 0x85, 0x33,
   0x83, 0x75, 0xf0, 0x20, 0xe5, 0x2b, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24, 0x0c, 0xf5, 0x82, 0xe4,
   0x35, 0x83, 0xf5, 0x83, 0x12, 0x04, 0x27, 0xe5, 0x34, 0x24, 0xf0, 0xff, 0xe5, 0x33, 0x34, 0xde,
   0xfe, 0xef, 0x78, 0x05, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xf5, 0x2b, 0x85, 0x34, 0x82,
   0x85, 0x33, 0x83, 0x75, 0xf0, 0x20, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24, 0x04, 0xf5, 0x82, 0xe4,
   0x35, 0x83, 0xf5, 0x83, 0x12, 0x04, 0x1b, 0x90, 0x34, 0xc0, 0x12, 0x04, 0x27, 0x85, 0x34, 0x82,
   0x85, 0x33, 0x83, 0x75, 0xf0, 0x20, 0xe5, 0x2b, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24, 0x08, 0xf5,
   0x82, 0xe4, 0x35, 0x83, 0xf5, 0x83, 0x12, 0x04, 0x1b, 0x90, 0x34, 0xc8, 0x12, 0x04, 0x27, 0x85,
   0x34, 0x82, 0x85, 0x33, 0x83, 0x75, 0xf0, 0x20, 0xe5, 0x2b, 0x12, 0x04, 0x33, 0xe5, 0x82, 0x24,
   0x0c, 0xf5, 0x82, 0xe4, 0x35, 0x83, 0xf5, 0x83, 0x12, 0x04, 0x1b, 0x90, 0x34, 0xc4, 0x12, 0x04,
   0x27, 0x90, 0x01, 0x01, 0xe0, 0x44, 0x40, 0xf0, 0x90, 0x01, 0x00, 0xe0, 0x44, 0x08, 0xf0, 0xe9,
   0x44, 0x04, 0x90, 0x34, 0xcd, 0xf0, 0x90, 0x34, 0xcc, 0xe0, 0x44, 0x01, 0xf0, 0xa3, 0xe0, 0x44,
   0x01, 0xf0, 0xa3, 0xe0, 0x44, 0x01, 0xf0, 0x22, 0x90, 0x34, 0xce, 0xe0, 0x44, 0x02, 0xf0, 0x90,
   0x34, 0xcd, 0xe0, 0x54, 0xfe, 0xf0, 0x90, 0x34, 0xcd, 0xe0, 0x20, 0xe3, 0xf9, 0x90, 0x01, 0x11,
   0xe0, 0x54, 0x22, 0xff, 0xbf, 0x22, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x50, 0xf0, 0x90, 0x01, 0x00,
   0xe0, 0x54, 0xf7, 0xf0, 0x90, 0x01, 0x01, 0xe0, 0x54, 0xbf, 0xf0, 0x22, 0x90, 0x01, 0x00, 0xe0,
   0x44, 0x08, 0xf0, 0x90, 0x01, 0x01, 0xe0, 0x44, 0x40, 0xf0, 0x22, 0x90, 0x34, 0xce, 0xe0, 0x44,
   0x02, 0xf0, 0x90, 0x34, 0xcd, 0xe0, 0x54, 0xfe, 0xf0, 0x90, 0x01, 0x00, 0xe0, 0x54, 0xf7, 0xf0,
   0x90, 0x01, 0x01, 0xe0, 0x54, 0xbf, 0xf0, 0x22, 0xcd, 0xef, 0xcd, 0x90, 0x01, 0x02, 0xe0, 0x30,
   0xe7, 0x02, 0xc3, 0x22, 0x7e, 0x2a, 0x7f, 0x00, 0x12, 0x0a, 0xfb, 0x90, 0x01, 0x04, 0xe0, 0x44,
   0x80, 0xf0, 0x90, 0x01, 0x02, 0xe0, 0x44, 0x80, 0xf0, 0xd3, 0x22, 0x8e, 0x12, 0x8f, 0x13, 0x8d,
   0x14, 0xe5, 0x14, 0xa2, 0xe1, 0x92, 0x09, 0xe5, 0x34, 0x24, 0x19, 0xf5, 0x82, 0xe4, 0x35, 0x33,
   0xf5, 0x83, 0xe0, 0xfd, 0xe5, 0x34, 0x24, 0x1a, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0,
   0xfb, 0xa2, 0x09, 0x92, 0x0a, 0x75, 0x19, 0x00, 0x75, 0x1a, 0x1a, 0x12, 0x11, 0x39, 0x30, 0x09,
   0x04, 0x7f, 0xc8, 0x80, 0x02, 0x7f, 0xe8, 0xe5, 0x13, 0x24, 0x18, 0xf5, 0x82, 0xe4, 0x35, 0x12,
   0xf5, 0x83, 0xef, 0xf0, 0xe5, 0x31, 0x60, 0x04, 0x7f, 0x02, 0x80, 0x02, 0x7f, 0x01, 0xe5, 0x13,
   0x24, 0x19, 0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xef, 0xf0, 0xe5, 0x34, 0x24, 0x19, 0xf5,
   0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xff, 0x7d, 0x1a, 0x7c, 0x00, 0x12, 0x0c, 0xda, 0xe5,
   0x13, 0x24, 0x1a, 0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xef, 0xf0, 0xe5, 0x13, 0x24, 0x1b,
   0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xee, 0xf0, 0xe5, 0x31, 0x60, 0x60, 0xe5, 0x13, 0x24,
   0x1c, 0xff, 0xe4, 0x35, 0x12, 0xfe, 0xe5, 0x34, 0x24, 0x12, 0xfd, 0xe4, 0x35, 0x33, 0xfc, 0x75,
   0x1b, 0x11, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0xe5, 0x13, 0x24, 0x22, 0xff, 0xe4, 0x35, 0x12, 0xfe,
   0x7c, 0x30, 0x7d, 0x10, 0x75, 0x1b, 0x11, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0xe5, 0x13, 0x24, 0x28,
   0xff, 0xe4, 0x35, 0x12, 0xfe, 0x7c, 0x30, 0x7d, 0x08, 0x75, 0x1b, 0x11, 0x7b, 0x06, 0x12, 0x13,
   0xc8, 0xe5, 0x34, 0x24, 0x18, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xff, 0xe5, 0x13,
   0x24, 0x2d, 0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xef, 0xf0, 0x80, 0x3f, 0xe5, 0x13, 0x24,
   0x1c, 0xff, 0xe4, 0x35, 0x12, 0xfe, 0x7c, 0x30, 0x7d, 0x10, 0x75, 0x1b, 0x11, 0x7b, 0x06, 0x12,
   0x13, 0xc8, 0xe5, 0x13, 0x24, 0x22, 0xff, 0xe4, 0x35, 0x12, 0xfe, 0x7c, 0x30, 0x7d, 0x08, 0x75,
   0x1b, 0x11, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0xe5, 0x13, 0x24, 0x28, 0xff, 0xe4, 0x35, 0x12, 0xfe,
   0x7c, 0x30, 0x7d, 0x10, 0x75, 0x1b, 0x11, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0xe5, 0x13, 0x24, 0x2e,
   0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xe4, 0xf0, 0xe5, 0x13, 0x24, 0x2f, 0xf5, 0x82, 0xe4,
   0x35, 0x12, 0xf5, 0x83, 0xe4, 0xf0, 0xe5, 0x34, 0x24, 0x11, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5,
   0x83, 0xe0, 0xff, 0xc3, 0x13, 0xff, 0xe5, 0x13, 0x24, 0x30, 0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5,
   0x83, 0xef, 0xf0, 0x30, 0x09, 0x41, 0xe5, 0x13, 0x24, 0x30, 0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5,
   0x83, 0xe0, 0xff, 0xe5, 0x31, 0x60, 0x04, 0x7e, 0x00, 0x80, 0x02, 0x7e, 0x10, 0xef, 0x4e, 0xf0,
   0xe5, 0x31, 0x60, 0x06, 0x7e, 0x00, 0x7f, 0x00, 0x80, 0x0f, 0xe5, 0x14, 0x30, 0xe0, 0x06, 0x7e,
   0x00, 0x7f, 0xff, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x00, 0xe5, 0x13, 0x24, 0x31, 0xf5, 0x82, 0xe4,
   0x35, 0x12, 0xf5, 0x83, 0xef, 0xf0, 0x22, 0xe5, 0x13, 0x24, 0x30, 0xf5, 0x82, 0xe4, 0x35, 0x12,
   0xf5, 0x83, 0xe0, 0x44, 0x40, 0xf0, 0xe5, 0x14, 0x30, 0xe0, 0x0f, 0xe5, 0x34, 0x24, 0x10, 0xf5,
   0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xff, 0x80, 0x02, 0x7f, 0x00, 0xe5, 0x13, 0x24, 0x31,
   0xf5, 0x82, 0xe4, 0x35, 0x12, 0xf5, 0x83, 0xef, 0xf0, 0x22, 0x8f, 0x15, 0x8c, 0x16, 0x8d, 0x17,
   0xe5, 0x15, 0xc3, 0x94, 0x04, 0x50, 0x56, 0xe5, 0x15, 0x94, 0x00, 0x40, 0x06, 0x7a, 0x00, 0x7b,
   0x60, 0x80, 0x04, 0x7a, 0x00, 0x7b, 0xc0, 0xe5, 0x17, 0xc4, 0xf8, 0x54, 0x0f, 0xc8, 0x68, 0xff,
   0xe5, 0x16, 0xc4, 0x54, 0xf0, 0x48, 0xfe, 0xe5, 0x15, 0x90, 0x1b, 0x75, 0x93, 0xfd, 0x7c, 0x00,
   0x12, 0x03, 0xb0, 0xef, 0x2b, 0xfb, 0xee, 0x3a, 0xfa, 0xe5, 0x17, 0xc4, 0xf8, 0x54, 0x0f, 0xc8,
   0x68, 0xff, 0xe5, 0x16, 0xc4, 0x54, 0xf0, 0x48, 0xfe, 0xe5, 0x15, 0x93, 0xfd, 0x7c, 0x00, 0x12,
   0x03, 0xb0, 0xed, 0x4c, 0x60, 0x63, 0x0b, 0xbb, 0x00, 0x01, 0x0a, 0x80, 0x5c, 0x7a, 0x00, 0x7b,
   0x1a, 0xe5, 0x17, 0xae, 0x16, 0x78, 0x02, 0xc3, 0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0x24, 0x0b,
   0xff, 0xe4, 0x3e, 0xfe, 0xe5, 0x15, 0x90, 0x1b, 0x75, 0x93, 0xfd, 0x7c, 0x00, 0x12, 0x03, 0xb0,
   0xef, 0x78, 0x02, 0xc3, 0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0x2b, 0xfb, 0xee, 0x3a, 0xfa, 0xe5,
   0x17, 0xae, 0x16, 0x78, 0x02, 0xc3, 0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0x24, 0x0b, 0xff, 0xe4,
   0x3e, 0xfe, 0xe5, 0x15, 0x90, 0x1b, 0x75, 0x93, 0xfd, 0x7c, 0x00, 0x12, 0x03, 0xb0, 0xed, 0x4c,
   0x60, 0x07, 0x74, 0x04, 0x2b, 0xfb, 0xe4, 0x3a, 0xfa, 0xcf, 0xeb, 0xcf, 0xce, 0xea, 0xce, 0x22,
   0x8e, 0x13, 0x8f, 0x14, 0x8d, 0x15, 0xeb, 0x60, 0x09, 0x14, 0x70, 0x1b, 0xaf, 0x15, 0x12, 0x0e,
   0x0a, 0x22, 0x7e, 0x30, 0x7f, 0xe0, 0xac, 0x13, 0xad, 0x14, 0x75, 0x1b, 0x11, 0x7b, 0x06, 0x12,
   0x13, 0xc8, 0xaf, 0x15, 0x12, 0x0e, 0x0a, 0x22, 0x8e, 0x13, 0x8f, 0x14, 0x12, 0x10, 0xcd, 0xc3,
   0xef, 0x95, 0x14, 0xff, 0xee, 0x95, 0x13, 0xcd, 0xef, 0xcd, 0xfc, 0xd3, 0xed, 0x94, 0x00, 0xec,
   0x64, 0x80, 0x94, 0x80, 0x40, 0x05, 0xce, 0xec, 0xce, 0x80, 0x04, 0x7e, 0x00, 0x7f, 0x01, 0xcc,
   0xee, 0xcc, 0xec, 0x90, 0x00, 0x05, 0xf0, 0x90, 0x00, 0x06, 0xef, 0xf0, 0x90, 0x00, 0x04, 0x74,
   0x51, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x44, 0x02, 0xf0, 0x22, 0xe4, 0x90, 0x00, 0x05, 0xf0, 0xef,
   0x60, 0x02, 0x80, 0x02, 0x7f, 0x01, 0x90, 0x00, 0x06, 0xef, 0xf0, 0x90, 0x00, 0x04, 0x74, 0x51,
   0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x44, 0x02, 0xf0, 0x22, 0x90, 0x30, 0x3c, 0xef, 0xf0, 0xee, 0x44,
   0x80, 0xa3, 0xf0, 0x22, 0xe5, 0x34, 0x24, 0x11, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0,
   0x30, 0xe6, 0x02, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x00, 0x04, 0x74, 0x02, 0xf0, 0x90, 0x00, 0x0a,
   0xf0, 0x30, 0x09, 0x32, 0xe5, 0x34, 0x45, 0x33, 0x70, 0x02, 0xc3, 0x22, 0x85, 0x34, 0x82, 0x85,
   0x33, 0x83, 0xc0, 0x83, 0xc0, 0x82, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x85, 0x34, 0x82, 0x85, 0x33,
   0x83, 0xa3, 0xa3, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xc3, 0xef, 0x9d, 0xff, 0xee, 0x9c, 0xd0, 0x82,
   0xd0, 0x83, 0xf0, 0xa3, 0xef, 0xf0, 0xe5, 0x34, 0x45, 0x33, 0x70, 0x02, 0xc3, 0x22, 0x12, 0x0e,
   0xee, 0x50, 0xf3, 0x90, 0x00, 0x0a, 0xe0, 0x20, 0xe5, 0x03, 0x30, 0x07, 0x41, 0xe5, 0x34, 0x45,
   0x33, 0x70, 0x02, 0xc3, 0x22, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xc0, 0x83, 0xc0, 0x82, 0xe0,
   0xfe, 0xa3, 0xe0, 0xff, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xa3, 0xa3, 0xe0, 0xfc, 0xa3, 0xe0,
   0xfd, 0xc3, 0xef, 0x9d, 0xff, 0xee, 0x9c, 0xd0, 0x82, 0xd0, 0x83, 0xf0, 0xa3, 0xef, 0xf0, 0xe5,
   0x34, 0x45, 0x33, 0x70, 0x02, 0xc3, 0x22, 0x12, 0x0e, 0xee, 0x50, 0xf3, 0x80, 0xb5, 0x85, 0x34,
   0x82, 0x85, 0x33, 0x83, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x12, 0x0d, 0xc8, 0xd3, 0x22, 0xe5, 0x34,
   0x24, 0x11, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0x30, 0xe7, 0x3b, 0xe5, 0x34, 0x24,
   0x1c, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0x65, 0x2b, 0x70, 0x03, 0x75, 0x2b, 0xff,
   0xe5, 0x34, 0x24, 0x1d, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xff, 0x12, 0x10, 0xe8,
   0x7e, 0x22, 0x7f, 0x10, 0x12, 0x1a, 0x3e, 0x8e, 0x33, 0x8f, 0x34, 0x90, 0x22, 0x2e, 0xe0, 0xfe,
   0xa3, 0xe0, 0x8e, 0x33, 0xf5, 0x34, 0xc3, 0x22, 0xd2, 0x0a, 0xe5, 0x34, 0x24, 0x1b, 0xf5, 0x82,
   0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0x70, 0x3a, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xc0, 0x83,
   0xc0, 0x82, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xa3, 0xa3, 0xe0,
   0xfc, 0xa3, 0xe0, 0xfd, 0xc3, 0xef, 0x9d, 0xff, 0xee, 0x9c, 0xfe, 0xd0, 0x82, 0xd0, 0x83, 0xf0,
   0xa3, 0xef, 0xf0, 0xd3, 0x94, 0x00, 0xee, 0x64, 0x80, 0x94, 0x80, 0x50, 0x03, 0x02, 0x10, 0x28,
   0x80, 0xc6, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xe0, 0xfe, 0xa3, 0xe0, 0xc3, 0xee, 0x64, 0x80,
   0x94, 0x80, 0x50, 0x03, 0x02, 0x10, 0x28, 0x12, 0x10, 0xcd, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83,
   0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xc3, 0x9f, 0xee, 0x64, 0x80, 0xf8, 0xec, 0x64, 0x80, 0x98, 0x40,
   0x20, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xc0, 0x83, 0xc0, 0x82, 0xa3, 0xa3, 0xe0, 0xfe, 0xa3,
   0xe0, 0xff, 0xed, 0x9f, 0xff, 0xec, 0x9e, 0xd0, 0x82, 0xd0, 0x83, 0xf0, 0xa3, 0xef, 0xf0, 0xc2,
   0x0a, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0xe5, 0x34, 0x24, 0x10,
   0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xfd, 0xc3, 0xef, 0x9d, 0xfd, 0xee, 0x94, 0x00,
   0xfc, 0x12, 0x10, 0x85, 0x50, 0x2c, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xc0, 0x83, 0xc0, 0x82,
   0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xa3, 0xa3, 0xe0, 0xfc, 0xa3,
   0xe0, 0xfd, 0xc3, 0xef, 0x9d, 0xff, 0xee, 0x9c, 0xd0, 0x82, 0xd0, 0x83, 0xf0, 0xa3, 0xef, 0xf0,
   0xc2, 0x0a, 0x20, 0x0a, 0x03, 0x02, 0x0f, 0x38, 0x7e, 0x22, 0x7f, 0x10, 0x12, 0x1a, 0x3e, 0x8e,
   0x33, 0x8f, 0x34, 0x8f, 0x82, 0x8e, 0x83, 0xe0, 0xfe, 0xa3, 0xe0, 0xd3, 0x94, 0x00, 0xee, 0x64,
   0x80, 0x94, 0x80, 0x40, 0x0d, 0x7e, 0x22, 0x7f, 0x10, 0xad, 0x34, 0xac, 0x33, 0x12, 0x18, 0x42,
   0x80, 0x1a, 0x12, 0x10, 0xd8, 0x85, 0x34, 0x82, 0x85, 0x33, 0x83, 0xee, 0x8f, 0xf0, 0x12, 0x04,
   0x05, 0x7e, 0x22, 0x7f, 0x30, 0xad, 0x34, 0xac, 0x33, 0x12, 0x18, 0x42, 0x90, 0x22, 0x2e, 0xe0,
   0xfe, 0xa3, 0xe0, 0xff, 0x65, 0x34, 0x70, 0x03, 0xee, 0x65, 0x33, 0x70, 0x02, 0xd3, 0x22, 0x8e,
   0x33, 0x8f, 0x34, 0xc3, 0x22, 0xc3, 0xef, 0x94, 0x04, 0xee, 0x64, 0x80, 0x94, 0x80, 0x40, 0x0c,
   0xd3, 0xed, 0x94, 0x04, 0xec, 0x64, 0x80, 0x94, 0x80, 0x50, 0x01, 0x22, 0xc3, 0xef, 0x94, 0xfc,
   0xee, 0x64, 0x80, 0x94, 0x7f, 0x40, 0x0c, 0xd3, 0xed, 0x94, 0xfc, 0xec, 0x64, 0x80, 0x94, 0x7f,
   0x50, 0x01, 0x22, 0xd3, 0xef, 0x94, 0x04, 0xee, 0x64, 0x80, 0x94, 0x80, 0x50, 0x0d, 0xc3, 0xed,
   0x94, 0xfc, 0xec, 0x64, 0x80, 0x94, 0x7f, 0x40, 0x02, 0xd3, 0x22, 0xc3, 0x22, 0x90, 0x30, 0x78,
   0xe0, 0xfd, 0xa3, 0xe0, 0xfe, 0xed, 0xff, 0x22, 0x90, 0x30, 0x64, 0xe0, 0xfd, 0xa3, 0xe0, 0xfe,
   0xed, 0x25, 0xe0, 0xff, 0xee, 0x33, 0xfe, 0x22, 0xc2, 0x0b, 0xe4, 0xf5, 0x14, 0x12, 0x10, 0xf1,
   0x22, 0xe4, 0xfe, 0xef, 0xf4, 0x60, 0x41, 0x74, 0x04, 0x2e, 0xf5, 0x82, 0xe4, 0x34, 0x21, 0xf5,
   0x83, 0xe0, 0xb4, 0xff, 0x23, 0x74, 0x04, 0x2e, 0xf5, 0x82, 0xe4, 0x34, 0x21, 0xf5, 0x83, 0xef,
   0xf0, 0x30, 0x0b, 0x0d, 0x74, 0x08, 0x2e, 0xf5, 0x82, 0xe4, 0x34, 0x21, 0xf5, 0x83, 0xe5, 0x14,
   0xf0, 0x90, 0x00, 0x02, 0x74, 0x01, 0xf0, 0x22, 0xbe, 0x03, 0x0a, 0x90, 0x00, 0x02, 0x74, 0x01,
   0xf0, 0xe4, 0xfe, 0x80, 0xc2, 0x0e, 0x80, 0xbf, 0x22, 0x8e, 0x15, 0x8f, 0x16, 0xca, 0xed, 0xca,
   0xc9, 0xeb, 0xc9, 0x30, 0x0a, 0x04, 0x7f, 0x4a, 0x80, 0x02, 0x7f, 0x42, 0xcb, 0xef, 0xcb, 0xea,
   0xc3, 0x94, 0x04, 0x50, 0x02, 0x80, 0x01, 0xc3, 0x40, 0x04, 0xcb, 0x44, 0x20, 0xcb, 0x85, 0x16,
   0x82, 0x85, 0x15, 0x83, 0xeb, 0xf0, 0xa3, 0xe4, 0xf0, 0x85, 0x16, 0x82, 0x85, 0x15, 0x83, 0xa3,
   0xa3, 0xe5, 0x1a, 0xf0, 0xe5, 0x19, 0x85, 0x16, 0x82, 0x85, 0x15, 0x83, 0xa3, 0xa3, 0xa3, 0xf0,
   0xe5, 0x16, 0x24, 0x04, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0x74, 0x0f, 0xf0, 0xe5, 0x16,
   0x24, 0x05, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xe4, 0xf0, 0xe5, 0x16, 0x24, 0x06, 0xf5,
   0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xe4, 0xf0, 0xe5, 0x16, 0x24, 0x07, 0xf5, 0x82, 0xe4, 0x35,
   0x15, 0xf5, 0x83, 0x74, 0x10, 0xf0, 0xea, 0x90, 0x1b, 0x83, 0x93, 0xfb, 0xea, 0x64, 0x01, 0x60,
   0x08, 0xea, 0x64, 0x02, 0x60, 0x03, 0xba, 0x03, 0x04, 0xcb, 0x44, 0x08, 0xcb, 0xe5, 0x16, 0x24,
   0x08, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xeb, 0xf0, 0xe5, 0x16, 0x24, 0x15, 0xf5, 0x82,
   0xe4, 0x35, 0x15, 0xf5, 0x83, 0x74, 0xff, 0xf0, 0xe5, 0x16, 0x24, 0x16, 0xf5, 0x82, 0xe4, 0x35,
   0x15, 0xf5, 0x83, 0xe9, 0xf0, 0xe5, 0x16, 0x24, 0x09, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83,
   0x74, 0x04, 0xf0, 0x25, 0x1a, 0xf5, 0x1a, 0xe4, 0x35, 0x19, 0xf5, 0x19, 0xea, 0xc3, 0x94, 0x04,
   0x40, 0x03, 0x02, 0x12, 0xf0, 0xea, 0x60, 0x03, 0xba, 0x01, 0x1f, 0xea, 0x24, 0x01, 0xfd, 0xe4,
   0x33, 0xfc, 0xe5, 0x1a, 0xae, 0x19, 0x78, 0x03, 0xc3, 0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0xff,
   0x12, 0x03, 0xb0, 0x8e, 0x19, 0x8f, 0x1a, 0x02, 0x12, 0xd0, 0xea, 0x24, 0xff, 0xfd, 0xe4, 0x34,
   0xff, 0xfc, 0x7e, 0x00, 0x7f, 0x0b, 0x12, 0x03, 0x9e, 0xcc, 0xee, 0xcc, 0xcd, 0xef, 0xcd, 0xe5,
   0x1a, 0xc4, 0xf8, 0x54, 0x0f, 0xc8, 0x68, 0xff, 0xe5, 0x19, 0xc4, 0x54, 0xf0, 0x48, 0xfe, 0x12,
   0x03, 0xb0, 0x8c, 0x1b, 0x8d, 0x1c, 0xea, 0x24, 0xff, 0xfd, 0xe4, 0x34, 0xff, 0xfc, 0x7e, 0x00,
   0x7f, 0x0b, 0x12, 0x03, 0x9e, 0xcc, 0xee, 0xcc, 0xcd, 0xef, 0xcd, 0xe5, 0x1a, 0xc4, 0xf8, 0x54,
   0x0f, 0xc8, 0x68, 0xff, 0xe5, 0x19, 0xc4, 0x54, 0xf0, 0x48, 0xfe, 0x12, 0x03, 0xb0, 0x8e, 0x19,
   0x8f, 0x1a, 0xe5, 0x1c, 0x45, 0x1b, 0x60, 0x08, 0x05, 0x1a, 0xe5, 0x1a, 0x70, 0x02, 0x05, 0x19,
   0xea, 0x24, 0xff, 0xfd, 0xe4, 0x34, 0xff, 0xfc, 0x7e, 0x00, 0x7f, 0x03, 0x12, 0x03, 0x9e, 0xd3,
   0xe5, 0x1c, 0x9f, 0xe5, 0x1b, 0x9e, 0x50, 0x18, 0xe5, 0x1c, 0x45, 0x1b, 0x60, 0x12, 0xba, 0x03,
   0x0f, 0xe5, 0x16, 0x24, 0x09, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xe0, 0x44, 0x80, 0xf0,
   0xe5, 0x16, 0x24, 0x0a, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xe5, 0x1a, 0xf0, 0xe5, 0x19,
   0xff, 0xe5, 0x16, 0x24, 0x0b, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xef, 0xf0, 0x80, 0x2d,
   0xe5, 0x1a, 0x54, 0x3f, 0xff, 0xe5, 0x16, 0x24, 0x0a, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83,
   0xef, 0xf0, 0xe5, 0x1a, 0xae, 0x19, 0x78, 0x06, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xff,
   0xe5, 0x16, 0x24, 0x0b, 0xf5, 0x82, 0xe4, 0x35, 0x15, 0xf5, 0x83, 0xef, 0xf0, 0x85, 0x16, 0x82,
   0x85, 0x15, 0x83, 0xe0, 0x44, 0x01, 0xf0, 0x22, 0x90, 0x30, 0x30, 0x74, 0x02, 0xf0, 0x75, 0x11,
   0x07, 0x75, 0x12, 0xd0, 0x90, 0x30, 0x30, 0xe0, 0x30, 0xe0, 0x0e, 0xe5, 0x12, 0x15, 0x12, 0x70,
   0x02, 0x15, 0x11, 0xe5, 0x12, 0x45, 0x11, 0x70, 0xeb, 0xe5, 0x12, 0x45, 0x11, 0x70, 0x12, 0x12,
   0x13, 0xae, 0x90, 0x21, 0x00, 0xe0, 0x60, 0x07, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x04, 0xf0, 0xc3,
   0x22, 0xe4, 0x90, 0x34, 0x58, 0xf0, 0x90, 0x34, 0x32, 0x74, 0x1f, 0xf0, 0x75, 0x11, 0x07, 0x75,
   0x12, 0xd0, 0x90, 0x34, 0x81, 0xe0, 0x64, 0x03, 0x60, 0x0e, 0xe5, 0x12, 0x15, 0x12, 0x70, 0x02,
   0x15, 0x11, 0xe5, 0x12, 0x45, 0x11, 0x70, 0xea, 0xe5, 0x12, 0x45, 0x11, 0x70, 0x12, 0x12, 0x13,
   0xae, 0x90, 0x21, 0x00, 0xe0, 0x60, 0x07, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x04, 0xf0, 0xc3, 0x22,
   0x90, 0x34, 0x98, 0xe0, 0x44, 0x04, 0xf0, 0xe4, 0x90, 0x00, 0x01, 0xf0, 0xd3, 0x22, 0x90, 0x00,
   0x01, 0x74, 0x0e, 0xf0, 0x90, 0x34, 0x98, 0xe0, 0x54, 0xfb, 0xf0, 0x90, 0x34, 0x58, 0x74, 0x01,
   0xf0, 0x90, 0x30, 0x30, 0x74, 0x04, 0xf0, 0x22, 0x8e, 0x16, 0x8f, 0x17, 0x8c, 0x18, 0x8d, 0x19,
   0xe4, 0xff, 0xef, 0xc3, 0x9b, 0x50, 0x53, 0xe5, 0x1b, 0x30, 0xe0, 0x12, 0xef, 0x7c, 0x00, 0x25,
   0x19, 0xfd, 0xec, 0x35, 0x18, 0x8d, 0x82, 0xf5, 0x83, 0xe0, 0xf5, 0x1c, 0x80, 0x1f, 0xe5, 0x1b,
   0x30, 0xe1, 0x13, 0xef, 0x7c, 0x00, 0x25, 0x19, 0xfd, 0xec, 0x35, 0x18, 0x8d, 0x82, 0xf5, 0x83,
   0xe4, 0x93, 0xf5, 0x1c, 0x80, 0x07, 0xe5, 0x19, 0x2f, 0xf8, 0xe6, 0xf5, 0x1c, 0xe5, 0x1b, 0x30,
   0xe4, 0x0f, 0xe5, 0x17, 0x2f, 0xf5, 0x82, 0xe4, 0x35, 0x16, 0xf5, 0x83, 0xe5, 0x1c, 0xf0, 0x80,
   0x06, 0xe5, 0x17, 0x2f, 0xf8, 0xa6, 0x1c, 0x0f, 0x80, 0xa8, 0x22, 0x90, 0x21, 0x00, 0xe0, 0xc4,
   0x33, 0x54, 0xe0, 0x24, 0x10, 0xf5, 0x82, 0xe4, 0x34, 0x21, 0xab, 0x82, 0xfa, 0x12, 0x10, 0xd8,
   0x8b, 0x82, 0x8a, 0x83, 0xee, 0x8f, 0xf0, 0x12, 0x04, 0x05, 0x7e, 0x22, 0x7f, 0x30, 0xcd, 0xeb,
   0xcd, 0xcc, 0xea, 0xcc, 0x12, 0x18, 0x42, 0xe4, 0x90, 0x21, 0x03, 0xf0, 0xaf, 0x2d, 0x12, 0x10,
   0xe8, 0x22, 0xe5, 0x30, 0x12, 0x04, 0x3f, 0x14, 0x83, 0x00, 0x14, 0xf1, 0x01, 0x15, 0x59, 0x02,
   0x15, 0xed, 0x03, 0x16, 0x41, 0x04, 0x16, 0x88, 0x05, 0x16, 0xfb, 0x06, 0x17, 0x6a, 0x07, 0x00,
   0x00, 0x17, 0xa2, 0xc2, 0x01, 0x12, 0x00, 0x06, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0xe5, 0x26,
   0x20, 0xe5, 0x08, 0x90, 0x34, 0x98, 0xe0, 0x54, 0xfe, 0xf0, 0x22, 0x90, 0x34, 0x98, 0xe0, 0x44,
   0x01, 0xf0, 0xe5, 0x26, 0x30, 0xe6, 0x0f, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53, 0x12, 0xfd, 0x80,
   0x12, 0x43, 0x12, 0x02, 0x80, 0x0d, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x43, 0x12, 0x02, 0x80, 0x03,
   0x53, 0x12, 0xfd, 0xe5, 0x26, 0x30, 0xe7, 0x0f, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x12, 0xf7,
   0x80, 0x12, 0x43, 0x12, 0x08, 0x80, 0x0d, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x43, 0x12, 0x08, 0x80,
   0x03, 0x53, 0x12, 0xf7, 0x43, 0x12, 0x01, 0x43, 0x12, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0,
   0x22, 0xc2, 0x01, 0x12, 0x00, 0x06, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0xe5, 0x26, 0x20, 0xe5,
   0x08, 0x90, 0x34, 0x98, 0xe0, 0x54, 0xfe, 0xf0, 0x22, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x01, 0xf0,
   0xe5, 0x26, 0x54, 0xc0, 0x60, 0x1c, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53, 0x12, 0xfd, 0x80, 0x03,
   0x43, 0x12, 0x02, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x12, 0xf7, 0x80, 0x1f, 0x43, 0x12, 0x08,
   0x80, 0x1a, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x43, 0x12, 0x02, 0x80, 0x03, 0x53, 0x12, 0xfd, 0xe5,
   0x27, 0x30, 0xe7, 0x05, 0x43, 0x12, 0x08, 0x80, 0x03, 0x53, 0x12, 0xf7, 0x43, 0x12, 0x01, 0x43,
   0x12, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0, 0x22, 0xc2, 0x01, 0x12, 0x00, 0x06, 0x90, 0x30,
   0x3a, 0xe0, 0xf5, 0x12, 0x43, 0x12, 0x01, 0x43, 0x12, 0x04, 0xe5, 0x26, 0x30, 0xe5, 0x5c, 0x90,
   0x34, 0x98, 0xe0, 0x44, 0x01, 0xf0, 0xe5, 0x26, 0x54, 0xc0, 0x60, 0x1c, 0xe5, 0x27, 0x30, 0xe6,
   0x05, 0x53, 0x12, 0xfd, 0x80, 0x03, 0x43, 0x12, 0x02, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x12,
   0xf7, 0x80, 0x30, 0x43, 0x12, 0x08, 0x80, 0x2b, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x43, 0x12, 0x02,
   0x80, 0x03, 0x53, 0x12, 0xfd, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x43, 0x12, 0x08, 0x80, 0x03, 0x53,
   0x12, 0xf7, 0xe5, 0x27, 0xf4, 0x54, 0x1f, 0xff, 0x90, 0x30, 0x34, 0xe0, 0x54, 0xe0, 0x4f, 0xf0,
   0xe4, 0xf5, 0x2c, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0, 0x80, 0x15, 0x90, 0x34, 0x98, 0xe0, 0x54,
   0xfe, 0xf0, 0xe5, 0x27, 0xf4, 0x54, 0x1f, 0xff, 0x90, 0x30, 0x34, 0xe0, 0x54, 0xe0, 0x4f, 0xf0,
   0x90, 0x30, 0x35, 0xe0, 0xf5, 0x12, 0x53, 0x12, 0xe0, 0xe5, 0x12, 0xf0, 0x22, 0xc2, 0x01, 0x12,
   0x00, 0x06, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0xe5, 0x26, 0x30, 0xe5, 0x3c, 0x90, 0x34, 0x98,
   0xe0, 0x44, 0x01, 0xf0, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53, 0x12, 0xfd, 0x80, 0x03, 0x43, 0x12,
   0x02, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x12, 0xf7, 0x80, 0x03, 0x43, 0x12, 0x08, 0xe5, 0x26,
   0x54, 0xc0, 0x60, 0x08, 0x43, 0x12, 0x01, 0x43, 0x12, 0x04, 0x80, 0x06, 0x53, 0x12, 0xfe, 0x43,
   0x12, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0, 0x22, 0x90, 0x34, 0x98, 0xe0, 0x54, 0xfe, 0xf0,
   0x22, 0xc2, 0x01, 0x12, 0x00, 0x06, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0xe5, 0x27, 0x30, 0xe6,
   0x05, 0x43, 0x12, 0x02, 0x80, 0x03, 0x53, 0x12, 0xfd, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x43, 0x12,
   0x08, 0x80, 0x03, 0x53, 0x12, 0xf7, 0xe5, 0x26, 0x54, 0xc0, 0x60, 0x08, 0x53, 0x12, 0xfe, 0x53,
   0x12, 0xfb, 0x80, 0x06, 0x43, 0x12, 0x01, 0x43, 0x12, 0x04, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x01,
   0xf0, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0, 0x22, 0x20, 0x02, 0x13, 0x12, 0x1c, 0x39, 0xaf, 0x29,
   0x7e, 0x00, 0x12, 0x1c, 0x70, 0xaf, 0x35, 0x7e, 0x00, 0x12, 0x1c, 0x77, 0xd2, 0x02, 0x90, 0x30,
   0x3a, 0xe0, 0xf5, 0x12, 0xe5, 0x26, 0x20, 0xe5, 0x0d, 0xc2, 0x01, 0x12, 0x00, 0x06, 0x90, 0x34,
   0x98, 0xe0, 0x54, 0xfe, 0xf0, 0x22, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x01, 0xf0, 0xe5, 0x26, 0x54,
   0xc0, 0x60, 0x2c, 0xc2, 0x01, 0x12, 0x00, 0x06, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53, 0x12, 0xfd,
   0x80, 0x03, 0x43, 0x12, 0x02, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x53, 0x12, 0xf7, 0x80, 0x03, 0x43,
   0x12, 0x08, 0x43, 0x12, 0x01, 0x43, 0x12, 0x04, 0x90, 0x30, 0x3a, 0xe5, 0x12, 0xf0, 0x22, 0x30,
   0x01, 0x03, 0x02, 0x17, 0xa2, 0x12, 0x18, 0xf4, 0xd2, 0x01, 0x22, 0xc2, 0x01, 0x12, 0x00, 0x06,
   0xe5, 0x26, 0x20, 0xe5, 0x09, 0x90, 0x34, 0x98, 0xe0, 0x54, 0xfe, 0xf0, 0x80, 0x55, 0x90, 0x34,
   0x98, 0xe0, 0x44, 0x01, 0xf0, 0xe5, 0x26, 0x30, 0xe6, 0x0f, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x53,
   0x12, 0xfd, 0x80, 0x12, 0x43, 0x12, 0x02, 0x80, 0x0d, 0xe5, 0x27, 0x30, 0xe6, 0x05, 0x43, 0x12,
   0x02, 0x80, 0x03, 0x53, 0x12, 0xfd, 0xe5, 0x26, 0x30, 0xe7, 0x0f, 0xe5, 0x27, 0x30, 0xe7, 0x05,
   0x53, 0x12, 0xf7, 0x80, 0x12, 0x43, 0x12, 0x08, 0x80, 0x0d, 0xe5, 0x27, 0x30, 0xe7, 0x05, 0x43,
   0x12, 0x08, 0x80, 0x03, 0x53, 0x12, 0xf7, 0x43, 0x12, 0x01, 0x53, 0x12, 0xfb, 0x90, 0x30, 0x3a,
   0xe5, 0x12, 0xf0, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0x22, 0xe5, 0x26, 0x30, 0xe5, 0x2c, 0x20,
   0x03, 0x21, 0xd2, 0x03, 0x12, 0x1c, 0x39, 0x75, 0x35, 0x06, 0x75, 0x29, 0x09, 0xaf, 0x29, 0x7e,
   0x00, 0x12, 0x1c, 0x70, 0x90, 0x30, 0x3a, 0xe0, 0xf5, 0x12, 0x53, 0x12, 0xfe, 0x43, 0x12, 0x04,
   0xe5, 0x12, 0xf0, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x01, 0xf0, 0x22, 0x90, 0x34, 0x98, 0xe0, 0x54,
   0xfe, 0xf0, 0x22, 0xe4, 0xff, 0xe5, 0x30, 0x24, 0xfe, 0x70, 0x2c, 0xe4, 0xfe, 0xee, 0xc3, 0x95,
   0x2c, 0x50, 0x12, 0x74, 0x01, 0xc8, 0xee, 0xc8, 0x08, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0xcf,
   0x4f, 0xcf, 0x0e, 0x80, 0xe8, 0x90, 0x30, 0x34, 0xe0, 0x54, 0xe0, 0xfe, 0xe5, 0x27, 0x54, 0x1f,
   0x6f, 0xf4, 0xce, 0x4e, 0xce, 0xee, 0xf0, 0x22, 0x90, 0x29, 0xa0, 0xe0, 0x70, 0x63, 0x90, 0x30,
   0x8c, 0xe4, 0xf0, 0xa3, 0x74, 0xc2, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0, 0x90, 0x30,
   0x8c, 0xe0, 0xff, 0x90, 0x29, 0xa0, 0xf0, 0x90, 0x30, 0x8c, 0xe4, 0xf0, 0xa3, 0x74, 0xc5, 0xf0,
   0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0, 0x90, 0x30, 0x8c, 0xe0, 0xff, 0x90, 0x29, 0xa1, 0xf0,
   0x90, 0x30, 0x8c, 0xe4, 0xf0, 0xa3, 0x74, 0xc4, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0,
   0x90, 0x30, 0x8c, 0xe0, 0xff, 0x90, 0x29, 0xa2, 0xf0, 0x90, 0x30, 0x8c, 0xe4, 0xf0, 0xa3, 0x74,
   0xc3, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0, 0x90, 0x30, 0x8c, 0xe0, 0x90, 0x29, 0xa3,
   0xf0, 0x22, 0x8c, 0x13, 0x8d, 0x14, 0xef, 0x24, 0x1e, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0,
   0xfc, 0xa3, 0xe0, 0x4c, 0x60, 0x41, 0xef, 0x24, 0x1e, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0,
   0xfc, 0xa3, 0xe0, 0xf5, 0x82, 0x8c, 0x83, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0x85, 0x14, 0x82, 0x85,
   0x13, 0x83, 0xe0, 0xfa, 0xa3, 0xe0, 0xfb, 0xd3, 0xed, 0x9b, 0xea, 0x64, 0x80, 0xf8, 0xec, 0x64,
   0x80, 0x98, 0x40, 0x13, 0xef, 0x24, 0x1e, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0, 0xfc, 0xa3,
   0xe0, 0xce, 0xec, 0xce, 0xff, 0x80, 0xaf, 0xad, 0x14, 0xac, 0x13, 0x12, 0x1a, 0x71, 0x22, 0x12,
   0x08, 0xca, 0x50, 0x4f, 0xe5, 0x34, 0x24, 0x12, 0xff, 0xe4, 0x35, 0x33, 0xfe, 0xe5, 0x34, 0x24,
   0x10, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xfd, 0xe4, 0xfb, 0x12, 0x0d, 0xa0, 0xe5,
   0x34, 0x24, 0x10, 0xf5, 0x82, 0xe4, 0x35, 0x33, 0xf5, 0x83, 0xe0, 0xff, 0x7e, 0x00, 0x12, 0x0e,
   0x29, 0x90, 0x00, 0x0a, 0x74, 0x40, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x44, 0x40, 0xff, 0xf0, 0x90,
   0x00, 0x0a, 0x74, 0x80, 0xf0, 0x4f, 0x90, 0x00, 0x0b, 0xf0, 0x90, 0x30, 0xe9, 0x74, 0x01, 0xf0,
   0x75, 0x2f, 0x06, 0x22, 0x90, 0x30, 0x3a, 0xe0, 0xff, 0xe5, 0x27, 0x30, 0xe6, 0x12, 0x30, 0x0c,
   0x06, 0xef, 0x54, 0xf5, 0xfe, 0x80, 0x04, 0xef, 0x44, 0x0a, 0xfe, 0xcf, 0xee, 0xcf, 0x80, 0x10,
   0x30, 0x0c, 0x06, 0xef, 0x44, 0x0a, 0xfe, 0x80, 0x04, 0xef, 0x54, 0xf5, 0xfe, 0xcf, 0xee, 0xcf,
   0xcf, 0x54, 0xfe, 0xcf, 0xcf, 0x44, 0x04, 0xcf, 0x90, 0x30, 0x3a, 0xef, 0xf0, 0x30, 0x0c, 0x09,
   0x7f, 0x08, 0x7e, 0x00, 0x12, 0x1c, 0x70, 0x80, 0x07, 0x7f, 0x22, 0x7e, 0x01, 0x12, 0x1c, 0x70,
   0xb2, 0x0c, 0x22, 0xc0, 0xe0, 0xc0, 0xf0, 0xc0, 0x83, 0xc0, 0x82, 0xc0, 0xd0, 0x75, 0xd0, 0x08,
   0xc2, 0xaf, 0xc2, 0x8c, 0xc2, 0x8d, 0xd3, 0xe5, 0x4a, 0x94, 0x00, 0xe5, 0x49, 0x94, 0x00, 0x40,
   0x08, 0xe5, 0x4a, 0x15, 0x4a, 0x70, 0x02, 0x15, 0x49, 0xd3, 0xe5, 0x4c, 0x94, 0x00, 0xe5, 0x4b,
   0x94, 0x00, 0x40, 0x08, 0xe5, 0x4c, 0x15, 0x4c, 0x70, 0x02, 0x15, 0x4b, 0x12, 0x00, 0x0e, 0xd2,
   0x8c, 0xd2, 0xaf, 0xd0, 0xd0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xf0, 0xd0, 0xe0, 0x32, 0x30, 0x07,
   0x3c, 0xe5, 0x2f, 0x70, 0x38, 0xc2, 0x07, 0x90, 0x22, 0x2e, 0xe0, 0xfe, 0xa3, 0xe0, 0x8e, 0x11,
   0xf5, 0x12, 0x90, 0x22, 0x4e, 0xe0, 0xfe, 0xa3, 0xe0, 0xff, 0x90, 0x22, 0x2e, 0xee, 0xf0, 0xa3,
   0xef, 0xf0, 0x90, 0x22, 0x4e, 0xe5, 0x11, 0xf0, 0xa3, 0xe5, 0x12, 0xf0, 0x8e, 0x33, 0x8f, 0x34,
   0x30, 0x08, 0x05, 0x12, 0x14, 0x2b, 0xc2, 0x08, 0xc2, 0x09, 0x12, 0x0e, 0x47, 0x22, 0x7f, 0x80,
   0x7e, 0x29, 0xe4, 0xfd, 0xfc, 0x8f, 0x82, 0x8e, 0x83, 0xe0, 0xfb, 0x74, 0x45, 0x2d, 0xf8, 0xc6,
   0xeb, 0xc6, 0x74, 0x04, 0x2f, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0, 0xfb, 0x74, 0x41, 0x2d,
   0xf8, 0xc6, 0xeb, 0xc6, 0x74, 0x08, 0x2f, 0xff, 0xe4, 0x3e, 0xfe, 0x0d, 0xbd, 0x00, 0x01, 0x0c,
   0xed, 0x64, 0x04, 0x4c, 0x70, 0xcf, 0x22, 0x90, 0x00, 0x00, 0x74, 0x0e, 0xf0, 0x00, 0x00, 0x00,
   0xe4, 0xf0, 0x12, 0x05, 0xcb, 0x12, 0x1c, 0x84, 0x90, 0x34, 0x98, 0xe0, 0x44, 0x01, 0xf0, 0xe5,
   0x30, 0xb4, 0x05, 0x0a, 0x12, 0x1c, 0x51, 0x50, 0x0d, 0x12, 0x18, 0xf4, 0x80, 0x08, 0xe5, 0x30,
   0xb4, 0x07, 0x03, 0x12, 0x06, 0xe8, 0x12, 0x04, 0x6b, 0x80, 0xe4, 0x80, 0xfe, 0x22, 0xef, 0x24,
   0x1e, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0, 0xfc, 0xa3, 0xe0, 0xfb, 0xca, 0xec, 0xca, 0x24,
   0x1e, 0xf5, 0x82, 0xe4, 0x3c, 0xf5, 0x83, 0xe0, 0xfc, 0xa3, 0xe0, 0xfd, 0xef, 0x24, 0x1e, 0xf5,
   0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xec, 0xf0, 0xa3, 0xed, 0xf0, 0xce, 0xea, 0xce, 0xcf, 0xeb, 0xcf,
   0x22, 0xef, 0x24, 0x1e, 0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xe0, 0xfa, 0xa3, 0xe0, 0xfb, 0xed,
   0x24, 0x1e, 0xf5, 0x82, 0xe4, 0x3c, 0xf5, 0x83, 0xea, 0xf0, 0xa3, 0xeb, 0xf0, 0xef, 0x24, 0x1e,
   0xf5, 0x82, 0xe4, 0x3e, 0xf5, 0x83, 0xec, 0xf0, 0xa3, 0xed, 0xf0, 0x22, 0xc0, 0xe0, 0xc0, 0xd0,
   0xc2, 0xaf, 0xc2, 0x8e, 0xc2, 0x8f, 0xd3, 0xe5, 0x40, 0x94, 0x00, 0xe5, 0x3f, 0x94, 0x00, 0x40,
   0x0d, 0xe5, 0x40, 0x15, 0x40, 0x70, 0x02, 0x15, 0x3f, 0x12, 0x1c, 0x67, 0xd2, 0x8e, 0xd2, 0xaf,
   0xd0, 0xd0, 0xd0, 0xe0, 0x32, 0x12, 0x08, 0xca, 0x50, 0x22, 0x7e, 0x30, 0x7f, 0xe0, 0x7c, 0x1c,
   0x7d, 0x7e, 0x75, 0x1b, 0x12, 0x7b, 0x06, 0x12, 0x13, 0xc8, 0x90, 0x00, 0x04, 0x74, 0x02, 0xf0,
   0x90, 0x00, 0x0a, 0xf0, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x22, 0x12, 0x19, 0xce,
   0x90, 0x21, 0x01, 0xe0, 0xf5, 0x28, 0x74, 0x41, 0x25, 0x28, 0xf8, 0xe6, 0xf5, 0x32, 0x74, 0x45,
   0x25, 0x28, 0xf8, 0xe6, 0xf5, 0x22, 0x90, 0x21, 0x00, 0xe0, 0x60, 0x03, 0xd2, 0x0d, 0x22, 0xc2,
   0x0d, 0x22, 0x90, 0x34, 0x30, 0xe4, 0xf0, 0xa3, 0xf0, 0xa3, 0x74, 0x1f, 0xf0, 0xa3, 0xe4, 0xf0,
   0x90, 0x01, 0x10, 0xe0, 0x20, 0xe1, 0x03, 0x00, 0x80, 0xf6, 0x90, 0x01, 0x12, 0xe0, 0x20, 0xe1,
   0x03, 0x00, 0x80, 0xf6, 0x22, 0xe4, 0xff, 0x74, 0x36, 0x2f, 0xf8, 0xe6, 0x90, 0x30, 0x8c, 0xf0,
   0xef, 0x90, 0x1b, 0xba, 0x93, 0x90, 0x30, 0x8d, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0,
   0x0f, 0xbf, 0x09, 0xe3, 0x22, 0xe4, 0xff, 0xef, 0x90, 0x1b, 0xc4, 0x93, 0x90, 0x30, 0x8c, 0xf0,
   0xef, 0x90, 0x1b, 0xba, 0x93, 0x90, 0x30, 0x8d, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0,
   0x0f, 0xbf, 0x09, 0xe3, 0x22, 0x02, 0x04, 0x0b, 0x16, 0x0c, 0x12, 0x18, 0x24, 0x30, 0x48, 0x60,
   0x6c, 0x90, 0xc8, 0x00, 0x01, 0x02, 0x03, 0x0b, 0x0f, 0x0a, 0x0e, 0x09, 0x0d, 0x08, 0x0c, 0xef,
   0xc4, 0x33, 0x33, 0x54, 0xc0, 0xff, 0x90, 0x01, 0x00, 0xe0, 0x54, 0x3f, 0x4f, 0xf0, 0x90, 0x01,
   0x02, 0xe0, 0x44, 0x80, 0xf0, 0x22, 0xe4, 0xf5, 0x31, 0x90, 0x00, 0x0a, 0x74, 0xff, 0xf0, 0x90,
   0x22, 0x2e, 0x74, 0x21, 0xf0, 0xa3, 0x74, 0x10, 0xf0, 0x22, 0x52, 0x53, 0x54, 0x12, 0x15, 0x16,
   0x10, 0x11, 0x40, 0x00, 0x20, 0x00, 0x40, 0xff, 0x3f, 0x3f, 0xbd, 0x28, 0x21, 0x00, 0x90, 0x30,
   0x40, 0x74, 0x32, 0xf0, 0xa3, 0x74, 0xb0, 0xf0, 0xa3, 0x74, 0x01, 0xf0, 0xa3, 0xe4, 0xf0, 0x22,
   0x75, 0x31, 0x01, 0x90, 0x00, 0x0a, 0x74, 0xff, 0xf0, 0x90, 0x00, 0x0b, 0xe0, 0x44, 0x20, 0xf0,
   0x22, 0x02, 0x1f, 0x07, 0x67, 0x18, 0x9f, 0x06, 0x60, 0x00, 0x09, 0x1a, 0xc5, 0x05, 0x2f, 0x1c,
   0x11, 0x90, 0x30, 0x40, 0x74, 0x32, 0xf0, 0xa3, 0x74, 0xb0, 0xf0, 0xa3, 0xe4, 0xf0, 0xa3, 0xf0,
   0x22, 0x12, 0x08, 0xca, 0x50, 0x08, 0xd2, 0x09, 0x12, 0x0e, 0x47, 0xe4, 0xf5, 0x2f, 0x22, 0x90,
   0x34, 0x30, 0x74, 0x1f, 0xf0, 0xa3, 0xe4, 0xf0, 0xa3, 0xf0, 0xa3, 0xf0, 0x22, 0x78, 0x7f, 0xe4,
   0xf6, 0xd8, 0xfd, 0x75, 0x81, 0x4c, 0x02, 0x1a, 0x07, 0xc2, 0xaf, 0xc2, 0x8c, 0xc2, 0x8d, 0x12,
   0x00, 0x0e, 0xd2, 0xaf, 0x22, 0xc2, 0x8e, 0x8e, 0x3f, 0x8f, 0x40, 0x12, 0x1c, 0x67, 0xd2, 0x8e,
   0x22, 0xe5, 0x4a, 0x45, 0x49, 0x70, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x22, 0xe5, 0x4c, 0x45, 0x4b,
   0x70, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x22, 0xc2, 0x8f, 0x75, 0x8d, 0xf5, 0x75, 0x8b, 0x41, 0x22,
   0x8e, 0x49, 0x8f, 0x4a, 0xd2, 0x8c, 0x22, 0x8e, 0x4b, 0x8f, 0x4c, 0xd2, 0x8c, 0x22, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0xc2, 0x0d, 0xe4, 0xf5, 0x2e, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xbb, 0x60
};
struct firmware {
   size_t size;
   u8 *data;
};
#define FIRMWARE_IMAGE_BASE		0x4000
#define	RT2561S_FIRMIM_LEN		(sizeof (RT2561S_FirmwareImage) / sizeof(u8))


#endif // _MARTE_RT61_H_

