#!/usr/bin/perl -w
#
# MaRTE OS.
#
# Generate write_marte_c_headers/kernel_types_sizes.ads using the value of
# the symbols defined in 'marte-kernel-types_sizes.o'

use strict;

# get MaRTE utils directory 
use File::Basename;
use File::Spec;
my $UTILS_PATH;
BEGIN {
    $UTILS_PATH= dirname(File::Spec->rel2abs( __FILE__ ));
}

# Require local_config.pl
require "$UTILS_PATH/local_config.pl";
use vars qw($MPATH);

# Require current_arch.pl
require "$UTILS_PATH/current_arch.pl";
use vars qw($CURRENT_ARCH);

# Require globals.pl
require "$UTILS_PATH/globals.pl";
use vars qw(%COMPILER_PREFIX);

# file names
my $imput_object_file = "not_set_path/marte-kernel-types_sizes.o";
if ($CURRENT_ARCH eq "gnat_arm_bb") {
    $imput_object_file = 
	"$MPATH/objs/libmarte_gnat_arm_bb_objs/marte-kernel-types_sizes.o";
} elsif ($CURRENT_ARCH eq "stm32f" || $CURRENT_ARCH eq "ev3") {
    $imput_object_file = 
	"$MPATH/objs/${CURRENT_ARCH}_objs/objs/marte-kernel-types_sizes.o";
} else {
    $imput_object_file = "$MPATH/lib/marte-kernel-types_sizes.o";
}
my $output_ads_file = "$MPATH/kernel/write_marte_c_headers/kernel_types_sizes.ads";

# Output ads file
open ADS_FILE, ">$output_ads_file" or
    die "Couldn't open $output_ads_file";

# Write ads header
print ADS_FILE "--\n" .
    "--  Size of types defined in the Ada part of the kernel that are\n" .
    "--  going to be used by C applications.\n" .
    "--\n" .
    "--  DO NOT EDIT THIS FILE\n" .
    "--\n" .
    "--  This file is automatically generated by mkmarte by calling the\n" .
    "--  script 'mextract_kernel_types_sizes.pl' which extracts the values\n" .
    "--  from 'marte-kernel-types_sizes.o'.\n\n" .
    "package Kernel_Types_Sizes is\n\n";

# Objdump of marte-kernel-types_sizes.o (section .rodata)
my $sections = "-j.rodata";
my @var_sizes = ("TASK_SET_ID_SIZE_IN_BYTES",
		 "TIMED_HANDLER_TIMED_EVENT_SIZE_IN_BYTES",
   		 "PTHREAD_ONCE_SIZE_IN_BYTES",
   		 "PTHREAD_KEY_T_SIZE_IN_BYTES",
   		 "POSIX_APPSCHED_EVENTSET_T_SIZE_IN_BYTES",
   		 "POSIX_APPSCHED_EVENT_SIZE_IN_BYTES",
   		 "SCHED_ACTIONS_SET_SIZE_IN_BYTES",
   		 "ITIMERSPEC_SIZE_IN_BYTES",
   		 "SIGNAL_EVENT_SIZE_IN_BYTES",
   		 "SIGINFO_T_SIZE_IN_BYTES",
   		 "STRUCT_SIG_ACTION_SIZE_IN_BYTES",
   		 "SIGNAL_SET_SIZE_IN_BYTES",
   		 "SEM_SIZE_IN_BYTES",
   		 "CVATTR_SIZE_IN_BYTES",
   		 "CV_SIZE_IN_BYTES",
   		 "MUTEX_APPSCHED_PARAM_T_SIZE_IN_BYTES",
   		 "MUTEXATTR_SIZE_IN_BYTES",
   		 "MUTEX_SIZE_IN_BYTES",
   		 "PTHREADATTR_SIZE_IN_BYTES",
   		 "SCHED_PARAM_SIZE_IN_BYTES",
   		 "KERNEL_TCB_SIZE_IN_BYTES");
foreach my $s (@var_sizes) {
    $sections .= " -j.rodata.$s";
}
open SYS_OUT, "$COMPILER_PREFIX{$CURRENT_ARCH}objdump " .
    "$sections -d $imput_object_file |";

# Proccess the objdump output and and write the ads file
while (my $line = <SYS_OUT>) {
    # looking for lines like:
    # 0000001c <CVATTR_SIZE_IN_BYTES>:
    if ($line =~ /[0-9a-f]{8} <(\w+)>/) {
	my $symbol_name = $1;
	print ADS_FILE "   $symbol_name : constant := 16#";

	# next line should be something like:
        #  20:	a8 01 00 00                                       ....
	$line = <SYS_OUT>;
	$line =~ /[0-9a-f]+:\s+([0-9a-f]{2})\s([0-9a-f]{2})\s([0-9a-f]{2})\s([0-9a-f]{2})/;
	print ADS_FILE "$4$3$2$1#;\n";
    }
}

# Write ads end
print ADS_FILE "\nend Kernel_Types_Sizes;";

close SYS_OUT;
close ADS_FILE; 
