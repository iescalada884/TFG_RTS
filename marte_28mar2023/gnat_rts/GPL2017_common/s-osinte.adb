------------------------------------------------------------------------------
--                                                                          --
--                 GNAT RUN-TIME LIBRARY (GNARL) COMPONENTS                 --
--                                                                          --
--                   S Y S T E M . O S _ I N T E R F A C E                  --
--                                                                          --
--                                   B o d y                                --
--                                                                          --
--             Copyright (C) 1991-1994, Florida State University            --
--                     Copyright (C) 1995-2014, AdaCore                     --
--                                                                          --
-- GNAT is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 3,  or (at your option) any later ver- --
-- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --
-- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --
-- or FITNESS FOR A PARTICULAR PURPOSE.                                     --
--                                                                          --
--                                                                          --
--                                                                          --
--                                                                          --
--                                                                          --
-- You should have received a copy of the GNU General Public License and    --
-- a copy of the GCC Runtime Library Exception along with this program;     --
-- see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    --
-- <http://www.gnu.org/licenses/>.                                          --
--                                                                          --
-- GNARL was developed by the GNARL team at Florida State University.       --
-- Extensive contributions were provided by Ada Core Technologies, Inc.     --
--                                                                          --
------------------------------------------------------------------------------

--  This version is for MaRTE OS

pragma Polling (Off);
--  Turn off polling, we do not want ATC polling to take place during
--  tasking operations. It causes infinite loops and other problems.

--  This package encapsulates all direct interfaces to OS services
--  that are needed by children of System.

with Interfaces.C; use Interfaces.C;
package body System.OS_Interface is

   --------------------
   -- Get_Stack_Base --
   --------------------

   function Get_Stack_Base (thread : pthread_t) return Address is
      pragma Warnings (Off, thread);

   begin
      return Null_Address;
   end Get_Stack_Base;

   ------------------
   -- pthread_init --
   ------------------

   procedure pthread_init is
      --  procedure MaRTE_Init;
      --  pragma Import (C, MaRTE_Init, "marte_init");
   begin
      --  MaRTE OS
      pragma Assert (pthread_key_t'Size = PTHREAD_KEY_T_SIZE_IN_BYTES * 8);

      --  MaRTE_Init;  --  MaRTE OS
      --  MaRTE_Init (file marte_init.c generated by the binder) can
      --  not be called from here since this function re-initializes
      --  global variables as __gl_priority_specific_dispatching (and
      --  others) and, consequently, the values assigned by the
      --  pragmas get lost.
      null;
   end pthread_init;

   --------------
   -- RW locks --
   --------------

   --  No RW lock in MaRTE, mutex is used instead but the
   --  interface is mantained

   function pthread_rwlockattr_setkind_np
     (attr : access pthread_rwlockattr_t;
      pref : int) return int is
      pragma Unreferenced (attr);
      pragma Unreferenced (pref);
   begin
      return 0;
   end pthread_rwlockattr_setkind_np;

   ----------------------
   -- Errno (MaRTE OS) --
   ----------------------

   function errno return int is
      function Pthread_Errno return access int;
      pragma Import (C, Pthread_Errno, "pthread_errno");
   begin
      return Pthread_Errno.all;
   end errno;

   -----------------
   -- To_Duration --
   -----------------

   function To_Duration (TS : timespec) return Duration is
   begin
      return Duration (TS.tv_sec) + Duration (TS.tv_nsec) / 10#1#E9;
   end To_Duration;

   function To_Duration (TV : struct_timeval) return Duration is
   begin
      return Duration (TV.tv_sec) + Duration (TV.tv_usec) / 10#1#E6;
   end To_Duration;

   --  << MaRTE OS
--     ------------------------
--     -- To_Target_Priority --
--     ------------------------

--     function To_Target_Priority
--       (Prio : System.Any_Priority) return Interfaces.C.int
--     is
--     begin
--        return Interfaces.C.int (Prio);
--     end To_Target_Priority;
   --  MaRTE OS >>

   -----------------
   -- To_Timespec --
   -----------------

   function To_Timespec (D : Duration) return timespec is
      S : time_t;
      F : Duration;

   begin
      S := time_t (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.

      if F < 0.0 then
         S := S - 1;
         F := F + 1.0;
      end if;

      return timespec'(tv_sec => S,
                       tv_nsec => time_t (Long_Long_Integer (F * 10#1#E9)));
   end To_Timespec;

   ----------------
   -- To_Timeval --
   ----------------

   function To_Timeval (D : Duration) return struct_timeval is
      S : time_t;
      F : Duration;

   begin
      S := time_t (Long_Long_Integer (D));
      F := D - Duration (S);

      --  If F has negative value due to a round-up, adjust for positive F
      --  value.

      if F < 0.0 then
         S := S - 1;
         F := F + 1.0;
      end if;

      return
        struct_timeval'
          (tv_sec  => S,
           tv_usec => time_t (Long_Long_Integer (F * 10#1#E6)));
   end To_Timeval;

   --  << MaRTE OS
   -------------
   -- Process --
   -------------

   --  Not implemented

   function getpid return pid_t is
   begin
      return 0;
   end getpid;

   --  Not implemented

   function prctl
     (option                 : int;
      arg2, arg3, arg4, arg5 : unsigned_long := 0) return int is
      pragma Unreferenced (option, arg2, arg3, arg4, arg5);
   begin
      return 0;
   end prctl;

   ---------
   -- LWP --
   ---------

   function lwp_self return System.Address is
      function To_Address is new
        Ada.Unchecked_Conversion (pthread_t, System.Address);
   begin
      return To_Address (pthread_self);
   end lwp_self;

   --  MaRTE OS >>

end System.OS_Interface;
