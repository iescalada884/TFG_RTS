------------------------------------------------------------------------------
--  -----------------------      M a R T E   O S      --------------------  --
------------------------------------------------------------------------------
--                                                             V2.0 2019-05-24
--
--                  'w r i t e _ m a r t e _ c _ h e a d e r s'
--
--                                 Ada Program
--
--  File 'write_marte_c_headers.adb'                                   By MAR.
--
--  Used during the installation phase. Automatically generates some C
--  headers using constants defined in the Ada kernel. Currently
--  generates:
--
--    'include/sys/marte_types.h'
--    'include/sys/marte_errno.h'
--    'include/sys/marte_errno_info.h'
--    'include/sys/marte_signals.h'
--    'include/sys/marte_general_constants.h'
--    'include/sys/marte_sched_events_codes.h'
--    'include/sys/marte_appsched_event_codes_str.h'
--
--  Should be called like this:
--    write_marte_c_headers /installation/path/marte/arch
--
--  ----------------------------------------------------------------------
--   Copyright (C) 2000-2019, Universidad de Cantabria, SPAIN
--
--   MaRTE OS web page: http://marte.unican.es
--   Contact Addresses: Mario Aldea Rivas          aldeam@unican.es
--                      Michael Gonzalez Harbour      mgh@unican.es
--
--  MaRTE OS  is free software; you can  redistribute it and/or  modify it
--  under the terms of the GNU General Public License  as published by the
--  Free Software Foundation;  either  version 2, or (at  your option) any
--  later version.
--
--  MaRTE OS  is distributed  in the  hope  that  it will be   useful, but
--  WITHOUT  ANY  WARRANTY;     without  even the   implied   warranty  of
--  MERCHANTABILITY  or  FITNESS FOR A  PARTICULAR PURPOSE.    See the GNU
--  General Public License for more details.
--
--  You should have received  a  copy of  the  GNU General Public  License
--  distributed with MaRTE  OS;  see file COPYING.   If not,  write to the
--  Free Software  Foundation,  59 Temple Place  -  Suite 330,  Boston, MA
--  02111-1307, USA.
--
--  As a  special exception, if you  link this  unit  with other  files to
--  produce an   executable,   this unit  does  not  by  itself cause  the
--  resulting executable to be covered by the  GNU General Public License.
--  This exception does  not however invalidate  any other reasons why the
--  executable file might be covered by the GNU Public License.
--
------------------------------------------------------------------------------
with Text_IO; use Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Command_Line;

with MaRTE.Configuration_Parameters;
with MaRTE.Debug_Messages;

with General_Constants_Info;
with MaRTE.Error_Codes_Info;
with Signals_Info;

with Kernel_Types_Sizes; use Kernel_Types_Sizes;
--  Kernel_Types_Sizes is automatically generated by mkmarte by calling the
--  script 'mextract_kernel_types_sizes.pl' which extracts the values from
--  'marte-kernel-types_sizes.o'.

procedure Write_Marte_C_Headers is

   package CP renames MaRTE.Configuration_Parameters;

   File_Header : constant String :=
     "/*"                    & Character'Val(10) &
     " * MaRTE OS"           & Character'Val(10) &
     " * Copyright (C) 2000-2008, Universidad de Cantabria, SPAIN"
                             & Character'Val(10) &
     " *"                    & Character'Val(10) &
     " * This file has been generated automatically by 'mkmarte'"
                             & Character'Val(10) &
     " * using constants defined in the Ada part of the kernel."
                             & Character'Val(10) &
     " *"                    & Character'Val(10) &
     " * Do Not Edit."       & Character'Val(10) &
     " */"                   & Character'Val(10) & Character'Val(10);

   --------------------------------
   -- Generate_Sys_Marte_Types_H --
   --------------------------------
   procedure Generate_Sys_Marte_Types_H (Inc_Path : in String) is
      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_types.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_TYPES_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_TYPES_H_");
      Put_Line (F, "");

      Put (F, "typedef struct { char b[");
      Put (F, KERNEL_TCB_SIZE_IN_BYTES + KERNEL_TCB_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_TCB_t;");

      Put (F, "typedef struct { char b[");
      Put (F, PTHREADATTR_SIZE_IN_BYTES + PTHREADATTR_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_attr_t;");

      Put (F, "typedef struct { char b[");
      Put (F, MUTEX_SIZE_IN_BYTES + MUTEX_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_mutex_t;");

      Put (F, "typedef struct { char b[");
      Put (F, MUTEXATTR_SIZE_IN_BYTES + MUTEXATTR_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_mutexattr_t;");

      Put (F, "typedef struct { char b[");
      Put (F, CV_SIZE_IN_BYTES + CV_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_cond_t;");

      Put (F, "typedef struct { char b[");
      Put (F, CVATTR_SIZE_IN_BYTES + CVATTR_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_condattr_t;");

      Put (F, "typedef struct { char b[");
      Put (F, SIGNAL_SET_SIZE_IN_BYTES + SIGNAL_SET_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_sigset_t;");

      Put (F, "typedef struct { char b[");
      Put (F, SEM_SIZE_IN_BYTES + SEM_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_sem_t;");

      Put (F, "typedef struct { char b[");
      Put (F, SCHED_ACTIONS_SET_SIZE_IN_BYTES +
             SCHED_ACTIONS_SET_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_posix_appsched_actions_t;");

      Put (F, "typedef struct { char b[");
      Put (F, PTHREAD_KEY_T_SIZE_IN_BYTES +
             PTHREAD_KEY_T_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_key_t;");

      Put (F, "typedef struct { char b[");
      Put (F, POSIX_APPSCHED_EVENTSET_T_SIZE_IN_BYTES +
             POSIX_APPSCHED_EVENTSET_T_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_posix_appsched_eventset_t;");

      Put (F, "typedef struct { char b[");
      Put (F, PTHREAD_ONCE_SIZE_IN_BYTES +
             PTHREAD_ONCE_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } marte_pthread_once_t;");

      Put (F, "#define _MARTE_PTHREAD_ONCE_INIT {{'p', 'O', 'N', 'i'");
      for I in 1 .. PTHREAD_ONCE_SIZE_IN_BYTES +
        PTHREAD_ONCE_SIZE_IN_BYTES mod 2 - 4 loop
         Put (F, ", 0");
      end loop;
      Put_Line (F, "}}");

      Put (F, "typedef struct { char b[");
      Put (F, TIMED_HANDLER_TIMED_EVENT_SIZE_IN_BYTES +
             TIMED_HANDLER_TIMED_EVENT_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } _marte_timed_handler_t;");

      Put (F, "typedef struct { char b[");
      Put (F, TASK_SET_ID_SIZE_IN_BYTES +
             TASK_SET_ID_SIZE_IN_BYTES mod 2, 1);
      Put_Line (F, "]; } _marte_thread_set_t;");

      New_Line (F);
      Put_Line (F, "#endif /* _MARTE_SYS_MARTE_TYPES_H_ */");

      Put("Generated file: "); Put(Inc_Path & "/marte_types.h");
      New_Line;
   end Generate_Sys_Marte_Types_H;

   --------------------------------
   -- Generate_Sys_Marte_Errno_H --
   --------------------------------
   procedure Generate_Sys_Marte_Errno_H (Inc_Path : in String) is
      use MaRTE.Error_Codes_Info;
      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_errno.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_ERRNO_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_ERRNO_H_");
      Put_Line (F, "");

      for C in MaRTE.Error_Codes_Info.Error_Names loop
         if C /= MaRTE.Error_Codes_Info.NO_ERROR then
            Put (F, "#define ");
            Put (F, MaRTE.Error_Codes_Info.List(C).C_Name);
            Put (F, Integer (MaRTE.Error_Codes_Info.List(C).Code));
            Put (F, " /* ");
            Put (F, MaRTE.Error_Codes_Info.List(C).C_Description);
            Put_Line (F, " */");
         end if;
      end loop;

      New_Line (F);
      Put_Line (F, "#endif /* _MARTE_SYS_MARTE_ERRNO_H_ */");

      Put("Generated file: "); Put(Inc_Path & "/marte_errno.h");
      New_Line;
      end Generate_Sys_Marte_Errno_H;

   -------------------------------------
   -- Generate_Sys_Marte_Errno_Info_H --
   -------------------------------------
   procedure Generate_Sys_Marte_Errno_Info_H (Inc_Path : in String) is
      use MaRTE.Error_Codes_Info;
      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_errno_info.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_ERRNO_INFO_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_ERRNO_INFO_H_");
      Put_Line (F, "");
      Put_Line (F, "#include <sys/marte_errno.h>");
      Put_Line (F, "");

      Put_Line (F, "static struct errdef {");
      Put_Line (F, "    int     num;");
      Put_Line (F, "    char    *str;");
      Put_Line (F, "} errlist[] = {");
      for C in MaRTE.Error_Codes_Info.Error_Names loop
         if C /= MaRTE.Error_Codes_Info.NO_ERROR then
            Put (F, "  { ");
            Put (F, MaRTE.Error_Codes_Info.List(C).C_Name);
            Put (F, ", ");
            Put (F, '"');
            Put (F, MaRTE.Error_Codes_Info.List(C).C_Description);
            Put (F, '"' & " },");
            New_Line (F);
         end if;
      end loop;
      Put_Line (F, "};");

      New_Line (F);
      Put_Line (F, "#endif /* _MARTE_SYS_MARTE_ERRNO_INFO_H_ */");

      Put("Generated file: "); Put(Inc_Path & "/marte_errno_info.h");
      New_Line;
   end Generate_Sys_Marte_Errno_Info_H;

   ----------------------------------
   -- Generate_Sys_Marte_Signals_H --
   ----------------------------------
   procedure Generate_Sys_Marte_Signals_H (Inc_Path : in String) is
      package Sig_IO is
         new Enumeration_IO (MaRTE.Error_Codes_Info.Error_Names);
      use Sig_IO;

      use Signals_Info;

      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_signals.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_SIGNALS_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_SIGNALS_H_");
      Put_Line (F, "");

      Put (F, "#define NSIG");
      Put (F, Signals_Info.List(Signals_Info.SIGRTMAX).Number);
      New_Line (F, 2);
      for S in Signals_Info.Signals_Names loop
         if S /= Signals_Info.SIGNULL then
            Put (F, "#define ");
            Put (F, Signals_Info.Signals_Names'Image(S));
            Put (F, Character'Val(9)); -- tab
            Put (F, Signals_Info.List(S).Number, 2);
            Put_Line (F, " /* " & Signals_Info.List(S).Description & "*/");
         end if;
      end loop;

      New_Line (F);
      Put_Line (F, "#endif /* _MARTE_SYS_MARTE_SIGNALS_H_ */");

      Put("Generated file: "); Put(Inc_Path & "/marte_signals.h");
      New_Line;
   end Generate_Sys_Marte_Signals_H;

   ---------------------------------------
   -- Generate_Sys_Sched_Events_Codes_H --
   ---------------------------------------
   procedure Generate_Sys_Marte_Sched_Events_Codes_H (Inc_Path : in String) is
      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_sched_events_codes.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _SYS_MARTE_SCHED_EVENTS_CODES_H_");
      Put_Line (F, "#define _SYS_MARTE_SCHED_EVENTS_CODES_H_");
      Put_Line (F, "");

      for C in General_Constants_Info.Sched_Events_Codes loop
         Put (F, "#define ");
         Put (F, General_Constants_Info.Sched_List(C).C_Name & " ");
         Put (F, General_Constants_Info.Sched_List(C).Value, 2);
         Put_Line (F, " /* "
                   & General_Constants_Info.Sched_List(C).C_Description &
                   "*/");
      end loop;

      New_Line (F);
      Put_Line (F, "#endif /* _SYS_MARTE_SCHED_EVENTS_CODES_H_ */");

      Put("Generated file: ");
      Put(Inc_Path & "/marte_sched_events_codes.h");
      New_Line;
   end Generate_Sys_Marte_Sched_Events_Codes_H;


   --------------------------------------------
   -- Generate_Sys_Marte_General_Constants_H --
   --------------------------------------------
   procedure Generate_Sys_Marte_General_Constants_H (Inc_Path : in String) is

      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_general_constants.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_GENERAL_CONSTANTS_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_GENERAL_CONSTANTS_H_");
      Put_Line (F, "");

      for C in General_Constants_Info.Constant_Names loop
         Put (F, "#define ");
         Put (F, "_MARTE_" & General_Constants_Info.List(C).C_Name & " ");
         Put (F, General_Constants_Info.List(C).Value, 2);
         Put_Line (F, " /* " & General_Constants_Info.List(C).C_Description &
                   "*/");
      end loop;

      New_Line (F);
      Put_Line (F, "#endif /* _MARTE_SYS_MARTE_GENERAL_CONSTANTS_H_ */");

      Put("Generated file: "); Put(Inc_Path &
                                   "/marte_general_constants.h");
      New_Line;
   end Generate_Sys_Marte_General_Constants_H;


   ---------------------------------------------------
   -- Generate_Sys_Marte_Appsched_Event_Codes_Str_H --
   ---------------------------------------------------
   procedure Generate_Sys_Marte_Appsched_Event_Codes_Str_H
     (Inc_Path : in String) is

      F : File_Type;
   begin
      Create (F, Out_File, Inc_Path & "/marte_appsched_event_codes_str.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_APPSCHED_EVENT_CODES_STR_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_APPSCHED_EVENT_CODES_STR_H_");
      New_Line (F);

      Put (F, "char * appsched_event_codes[] = {");
      New_Line (F);
      for C in General_Constants_Info.Sched_Events_Codes loop
         Put (F,
              '"' & General_Constants_Info.Sched_List(C).C_Name & '"' & ',');
         New_Line (F);
      end loop;
      Put (F, "};");

      New_Line (F);
      Put_Line (F,
                "#endif /* _MARTE_SYS_MARTE_APPSCHED_EVENT_CODES_STR_H_ */");

      Put("Generated file: "); Put(Inc_Path &
                                   "/marte_appsched_event_codes_str.h");
      New_Line;
   end Generate_Sys_Marte_Appsched_Event_Codes_Str_H;


   ---------------------------------------------------
   -- Generate_Sys_Marte_Configuration_Parameters_H --
   ---------------------------------------------------
   procedure Generate_Sys_Marte_Configuration_Parameters_H
     (Inc_Path : in String) is

      F : File_Type;

      Arch_Values : array (CP.Supported_Architectures) of Integer :=
        (CP.ARCH_X86       => 0,
         CP.ARCH_LINUX     => 1,
         CP.ARCH_LINUX_LIB => 2,
         CP.ARCH_XTRATUM   => 3,
         CP.ARCH_RPI       => 4,
         CP.ARCH_GNAT_BB_ARM => 5,
         CP.ARCH_STM32F      => 6,
         CP.ARCH_EV3         => 7);

      --  Don't use attribute 'Image' to reduce executable's footprint
      Arch_Names : array (CP.Supported_Architectures) of String (1 .. 16) :=
        (CP.ARCH_X86         => "ARCH_X86        ",
         CP.ARCH_LINUX       => "ARCH_LINUX      ",
         CP.ARCH_LINUX_LIB   => "ARCH_LINUX_LIB  ",
         CP.ARCH_XTRATUM     => "ARCH_XTRATUM    ",
         CP.ARCH_RPI         => "ARCH_RPI        ",
         CP.ARCH_GNAT_BB_ARM => "ARCH_GNAT_BB_ARM",
         CP.ARCH_STM32F      => "ARCH_STM32F     ",
         CP.ARCH_EV3         => "ARCH_EV3        ");
   begin
      Create (F, Out_File, Inc_Path & "/marte_configuration_parameters.h");

      Put (F, File_Header);
      Put_Line (F, "#ifndef _MARTE_SYS_MARTE_CONFIGURATION_PARAMETERS_H_");
      Put_Line (F, "#define _MARTE_SYS_MARTE_CONFIGURATION_PARAMETERS_H_");
      New_Line (F);

      --  Architecture
      Put_Line (F, "// Supported Architectures");
      for A in CP.Supported_Architectures'range loop
         Put_Line (F, "#define " & Arch_Names(A) & "   " &
                   Integer'Image(Arch_Values(A)));
      end loop;
      Put_Line (F, "// Current Architecture");
      Put_Line (F, "#define MARTE_ARCHITECTURE   " &
                Arch_Names(CP.MaRTE_Architecture'First));
      New_Line (F);

      --  Main task's stack size
      Put_Line (F,
                "// Main task's stack size (only used in x86 architecture)");
      Put (F, "#define _MARTE_CONFIG_MAIN_TASK_STACK_SIZE_IN_BYTES ");
      Put (F, CP.Main_Stack_Size_In_Bytes);
      New_Line (F, 2);


      --  Dinamic Memory
      Put_Line (F, "// Dinamic Memory");
      Put_Line (F, "//extern char dynamic_memory_pool[]; <--- remove??");

      Put (F, "#define DYNAMIC_MEMORY_POOL_SIZE_IN_K ");
      Put (F,
           CP.Dynamic_Memory_Pool_Size_In_Bytes / 1024);
      New_Line (F);

      if CP.Use_TLSF_Memory_Allocator'First then
         Put_Line (F, "#define USE_TLSF_MEMORY_ALLOCATOR");
      else
         Put_Line (F, "#undef USE_TLSF_MEMORY_ALLOCATOR");
      end if;

      if MaRTE.Debug_Messages.TLSF_Dynamic_Memory_Debug_Messages'First then
         Put_Line (F, "#define TLSF_DEBUG");
      else
         Put_Line (F, "#undef TLSF_DEBUG");
      end if;

      Put (F, "#define TLSF_MAX_SL_LOG2_INDEX ");
      Put (F, CP.TLSF_MAX_SL_LOG2_INDEX);
      New_Line (F, 2);

      --  SIGQUEUE_MAX
      Put_Line (F, "// SIGQUEUE MAX");
      Put (F, "#define MARTE_SIGQUEUE_MAX ");
      Put (F, CP.Queued_Signals_Maximum);
      New_Line (F, 2);

      --  Devices filesystem
      Put_Line (F, "// Devices filesystem");
      if (CP.Use_Devices_Filesystem) then
         Put_Line (F, "#define USE_DEVICES_FILESYSTEM");

      else
         Put_Line (F, "#undef USE_DEVICES_FILESYSTEM");
      end if;

      Put (F, "#define OPEN_FILES_MX    ");
      Put (F, CP.Open_Files_Mx);
      New_Line (F);

      Put (F, "#define DEVICES_FILES_MX ");
      Put (F, CP.Devices_Files_Mx);
      New_Line (F);

      Put (F, "#define DEVICES_MX       ");
      Put (F, CP.Devices_Mx);
      New_Line (F);

      Put (F, "#define MINOR_NUMBER_MX  ");
      Put (F, CP.Minor_Number_Mx);
      New_Line (F);

      Put (F, "#define PATH_MX          ");
      Put (F, CP.Path_Mx);
      New_Line (F);

      New_Line (F, 2);
      Put_Line (F,
                "#endif /* _MARTE_SYS_MARTE_CONFIGURATION_PARAMETERS_H_ */");

      Put("Generated file: "); Put(Inc_Path &
                                   "/marte_configuration_parameters.h");
      New_Line;
   end Generate_Sys_Marte_Configuration_Parameters_H;

begin
   -- Checks the command line
   if Ada.Command_Line.Argument_Count /= 1 then
      Put_Line
        ("Use: write_marte_c_headers /installation/path/marte/arch");
      return;
   end if;

   -- Generates the C headers
   Generate_Sys_Marte_Types_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Errno_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Errno_Info_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Signals_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Sched_Events_Codes_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_General_Constants_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Appsched_Event_Codes_Str_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");

   Generate_Sys_Marte_Configuration_Parameters_H
     (Ada.Command_Line.Argument(1) & "/arch_dependent_files/sys_marte/");
end Write_Marte_C_Headers;
